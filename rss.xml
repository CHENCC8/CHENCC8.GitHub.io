<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Orange</title>
        <link>https://chencc8.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 20 Mar 2022 00:57:09 +0800</pubDate>
        <lastBuildDate>Sun, 20 Mar 2022 00:57:09 +0800</lastBuildDate>
        <category>leetcode</category>
        <category>python</category>
        <category>matlab</category>
        <category>深度学习</category>
        <category>数据分析</category>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/20/matlab-jie-gou-hua-cheng-shi-yu-zi-ding-yi-han-shu/</guid>
            <title>matlab结构化程式与自定义函数</title>
            <link>https://chencc8.github.io/2022/03/20/matlab-jie-gou-hua-cheng-shi-yu-zi-ding-yi-han-shu/</link>
            <category>matlab</category>
            <pubDate>Sun, 20 Mar 2022 00:57:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;matlab结构化程式与自定义函数&#34;&gt;&lt;a href=&#34;#matlab结构化程式与自定义函数&#34; class=&#34;headerlink&#34; title=&#34;matlab结构化程式与自定义函数&#34;&gt;&lt;/a&gt;matlab结构化程式与自定义函数&lt;/h1&gt;&lt;h2 id=&#34;MATLAB-Script-脚本&#34;&gt;&lt;a href=&#34;#MATLAB-Script-脚本&#34; class=&#34;headerlink&#34; title=&#34;MATLAB Script(脚本)&#34;&gt;&lt;/a&gt;MATLAB Script(脚本)&lt;/h2&gt;&lt;p&gt;A file containing a series of MATLAB commands.&lt;br&gt;Pretty much like a C/C++ program.&lt;br&gt;Scripts need to be saved to a &amp;lt;file&amp;gt;.m file before they can be run.&lt;/p&gt;
&lt;p&gt;tips:1 . matlab中注释符号为%，两个百分号%%分为section(用于debug)&lt;br&gt;   2 . Smart Indent （智能缩进）功能，用于自动对齐&lt;br&gt;   3 . 尽量使用Script Editor（编辑器）&lt;/p&gt;
&lt;h2 id=&#34;Script-Flow&#34;&gt;&lt;a href=&#34;#Script-Flow&#34; class=&#34;headerlink&#34; title=&#34;Script Flow&#34;&gt;&lt;/a&gt;Script Flow&lt;/h2&gt;&lt;p&gt;Typically scripts run from the first line to the last.&lt;br&gt;&lt;strong&gt;Structured programming&lt;/strong&gt; techniques(subroutine, loop, condition, etc) are applied to make the program looks neat.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relational (Logical) Operators&lt;br&gt;  &amp;lt; , &amp;lt;= , &amp;gt; , &amp;gt;= , == , ~=(不等于) , &amp;amp;&amp;amp;, ||&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Flow-Control&#34;&gt;&lt;a href=&#34;#Flow-Control&#34; class=&#34;headerlink&#34; title=&#34;Flow Control&#34;&gt;&lt;/a&gt;Flow Control&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;if,elseif,else&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;break&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;for&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;continue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;switch,case,otherwise&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;try,catch&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pause&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;while&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;tip:&lt;br&gt;   1 . rem(a, 2)是求余数 -&amp;gt; remainder&lt;br&gt;   2 . prod(1:n) -&amp;gt; n的阶乘&lt;br&gt;   如果A是向量，prod(A)返回A向量的乘积。&lt;br&gt;   如果A是矩阵，prod(A)将A看作列向量，返回每一列元素的乘积并组成一个行向量B。&lt;br&gt;   如果A是多维数组，prod(A)沿着第一个非单例作为向量，返回一个行向量数组。&lt;br&gt;   B = prod(A,dim)  沿着指定的dim标量的维计算A矩阵的乘积。&lt;/p&gt;
&lt;h2 id=&#34;Pre-allocating-Space-to-Variables&#34;&gt;&lt;a href=&#34;#Pre-allocating-Space-to-Variables&#34; class=&#34;headerlink&#34; title=&#34;Pre-allocating Space to Variables&#34;&gt;&lt;/a&gt;Pre-allocating Space to Variables&lt;/h2&gt;&lt;p&gt;tic - toc : 用来计算时间&lt;/p&gt;
&lt;figure class=&#34;highlight matlab&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;%%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ii = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; jj = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        A(ii, jj) = ii + jj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;toc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;%%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A = &lt;span class=&#34;built_in&#34;&gt;zeros&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ii = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(A, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; jj = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(A, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        A(ii, jj) = ii + jj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;toc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二节明显比第一节多用时间短&lt;/p&gt;
&lt;h2 id=&#34;Tips-for-Script-Writing&#34;&gt;&lt;a href=&#34;#Tips-for-Script-Writing&#34; class=&#34;headerlink&#34; title=&#34;Tips for Script Writing&#34;&gt;&lt;/a&gt;Tips for Script Writing&lt;/h2&gt;&lt;p&gt;Use ellipsis(…) to make scripts more readable(matlab中书写向量或矩阵不能直接换行)&lt;br&gt;e.g.  A = [1 2 3 4 5 6;7 …&lt;br&gt;   8 9 10 11 12]&lt;/p&gt;
&lt;p&gt;Press Ctrl + C to terminate the script before conclusion&lt;/p&gt;
&lt;h2 id=&#34;Scripts-vs-Functions&#34;&gt;&lt;a href=&#34;#Scripts-vs-Functions&#34; class=&#34;headerlink&#34; title=&#34;Scripts vs. Functions&#34;&gt;&lt;/a&gt;Scripts vs. Functions&lt;/h2&gt;&lt;p&gt;Scripts and functions are both .m file that contain MATLAB commands&lt;br&gt;Functions are written when we need to perform routines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions&lt;br&gt;  keyword: function&lt;br&gt;  &lt;strong&gt;function output = function name(input)&lt;/strong&gt;&lt;br&gt;  文件保存时要以function name为文件名保存&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;e.g.1&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight matlab&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;x&lt;/span&gt; = &lt;span class=&#34;title&#34;&gt;freebody&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x0, v0, t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% calculation of free falling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% x0: initial displacement in m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% v0: initial velocity in m/sec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% t: the elapsed time in sec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% x: the depth of falling in m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = x0 + v0 .* t + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;9.8&lt;/span&gt;*t.*t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% .*是因为输入值可以为向量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% 以下为调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freebody(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;% 如果不用.*结果会出错，不能正确对应输入值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;freebody([&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;e.g.2&lt;figure class=&#34;highlight matlab&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;[a F]&lt;/span&gt; = &lt;span class=&#34;title&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(v2, v1, t2, t1, m)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = (v2 - v1)./(t2 - t1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F = m.*a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[Acc Force] = acc(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Function-Default-Variables&#34;&gt;&lt;a href=&#34;#Function-Default-Variables&#34; class=&#34;headerlink&#34; title=&#34;Function Default Variables&#34;&gt;&lt;/a&gt;Function Default Variables&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;inputname&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Variable name of function input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;mfilename&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;File name of currently running function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;nargin&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Number of function input arguments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;nargout&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Number of function output arguments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;varargin&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Variable length input argument list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;varargout&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Variable length output argument list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;figure class=&#34;highlight matlab&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;[volumn]&lt;/span&gt; = &lt;span class=&#34;title&#34;&gt;pillar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Do, Di, height)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; nargin == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	height = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;volume = &lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(Do.^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; - Di.^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).*height*&lt;span class=&#34;built_in&#34;&gt;pi&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Function-Handles&#34;&gt;&lt;a href=&#34;#Function-Handles&#34; class=&#34;headerlink&#34; title=&#34;Function Handles&#34;&gt;&lt;/a&gt;Function Handles&lt;/h2&gt;&lt;p&gt;A way to create anonymous(匿名函数) functions, i.e., one line expression functions that do not have to be defined in .m files.&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;figure class=&#34;highlight matlab&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;f = @(x) &lt;span class=&#34;built_in&#34;&gt;exp&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-2&lt;/span&gt; * x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;plot&lt;/span&gt;(x, f(x));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/17/matlab-ji-ben-cao-zuo-ju-zhen-cao-zuo/</guid>
            <title>matlab基本操作+矩阵操作</title>
            <link>https://chencc8.github.io/2022/03/17/matlab-ji-ben-cao-zuo-ju-zhen-cao-zuo/</link>
            <category>matlab</category>
            <pubDate>Thu, 17 Mar 2022 19:14:48 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;matlab基本操作&#34;&gt;&lt;a href=&#34;#matlab基本操作&#34; class=&#34;headerlink&#34; title=&#34;matlab基本操作&#34;&gt;&lt;/a&gt;matlab基本操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Special Variables and Constants&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ans&lt;/li&gt;
&lt;li&gt;i, j: complex number(复数)&lt;/li&gt;
&lt;li&gt;Inf: ∞&lt;/li&gt;
&lt;li&gt;eps: 2.2204e-016(指一个很小的数)&lt;/li&gt;
&lt;li&gt;NaN: not a number&lt;/li&gt;
&lt;li&gt;pi: Π&lt;/li&gt;
&lt;li&gt;变量名不能是关键词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To list keywords:&lt;br&gt;   iskeyword&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;e.g.&lt;/p&gt;
&lt;p&gt;  x = 1/0    -&amp;gt; Inf&lt;br&gt;  x = log(0)        -&amp;gt; -Inf&lt;br&gt;  x = inf/inf        -&amp;gt; NaN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MATLAB Calling Priority&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Varieble &amp;gt; Built-in function &amp;gt; Subunction &amp;gt; Private function(MEX-file &amp;gt; P-file &amp;gt; M-file)&lt;/li&gt;
&lt;li&gt;不要用 built-in function name 或者 keyword 当作 variable name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Numeric Display  “Format”&lt;br&gt;  short    -&amp;gt; 小数点后4位&lt;br&gt;  long    -&amp;gt; 双精度小数点后15位，单精度小数点后7位&lt;br&gt;  shortE    -&amp;gt; 科学表示法，小数点后4位&lt;br&gt;  longE    -&amp;gt; 科学表示法，双精度小数点后15位，单精度小数点后7位&lt;br&gt;  bank    -&amp;gt; 如美金，保留至小数点后两位&lt;br&gt;  hex        -&amp;gt; 转为16进制&lt;br&gt;  rat        -&amp;gt; 转成有理数（即分数)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command Line Terminal&lt;br&gt;  ; at the end of a command suppresses output to the terminal&lt;br&gt;  （加分号后不显示运算结果）&lt;br&gt;  方向键↑ display previous commands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some Functions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clc  -&amp;gt; clear command window display&lt;/li&gt;
&lt;li&gt;clear/clear all -&amp;gt; remove all variables in the workspace&lt;/li&gt;
&lt;li&gt;close all -&amp;gt; to close all figures&lt;/li&gt;
&lt;li&gt;who -&amp;gt; variables in the workspace&lt;/li&gt;
&lt;li&gt;whos -&amp;gt; variable information of the workspace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量命名规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量名区分大小写&lt;/li&gt;
&lt;li&gt;变量名长度不超过63位&lt;/li&gt;
&lt;li&gt;注释：&lt;strong&gt;单％是注释，双％％是分节&lt;/strong&gt;。双%%后面空格一下写的东西也视作注释&lt;/li&gt;
&lt;li&gt;变量名以&lt;strong&gt;字母&lt;/strong&gt;开头，可以由&lt;strong&gt;字母，数字和下划线&lt;/strong&gt;组成，但不能使用标点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;matlab矩阵操作&#34;&gt;&lt;a href=&#34;#matlab矩阵操作&#34; class=&#34;headerlink&#34; title=&#34;matlab矩阵操作&#34;&gt;&lt;/a&gt;matlab矩阵操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Array(Vector and Matrix)&lt;br&gt;  Row vector:&lt;br&gt;  a = [1 2 3 4]&lt;br&gt;  Column Vector:&lt;br&gt;  b = [1; 2; 3; 4]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array Indexing&lt;br&gt;  &lt;strong&gt;从1开始，不是从0开始&lt;/strong&gt;&lt;br&gt;  Select a certain subset of elements inside a matrix&lt;br&gt;  e.g.   A(8)&lt;br&gt;  A([1 3 5])&lt;br&gt;  A([1 3; 1 3])&lt;br&gt;  A(3,2)&lt;br&gt;  A([1 3], [1 3])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replacing Entries&lt;br&gt;  The expression  A() = []     delete rows or columns of A&lt;br&gt;  A(3, : ) -&amp;gt; 第三行全部&lt;br&gt;  A(3, :) = [] -&amp;gt; 删除第三行全部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colon(分号) Operator&lt;br&gt;  e.g.  B = 1 : 5&lt;br&gt; B = 1 : 2 : 5&lt;br&gt; str = ‘a’ : 2 : ‘z’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array Concatenation&lt;br&gt;  F = [A B]  -&amp;gt; 横向排列&lt;br&gt;  F = [A ; B]  -&amp;gt; 竖向排列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array Manipulation(类似线代)&lt;br&gt;  A * B -&amp;gt; 表示矩阵乘法&lt;br&gt;  A .* B -&amp;gt; 表示哈达玛积（即对应项相乘）&lt;br&gt;  G = A / B -&amp;gt; 相当于A乘B的逆（inv()）&lt;br&gt;  H = A./ B -&amp;gt; 对应项相除&lt;br&gt;  C = A` -&amp;gt; 矩阵的转置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some Special Matrix&lt;br&gt;  linspace(x1, x2, N) : linearly spaced vectors&lt;/p&gt;
&lt;p&gt;  用于产生x1,x2之间的N点行矢量。其中x1、x2、N分别为起始值、中止值、元素个数。若缺省N，默认点数为100。在matlab的命令窗口下输入help linspace或者doc linspace可以获得该函数的帮助信息。&lt;/p&gt;
&lt;p&gt;eye(n) : n x n identity matrix（n x n 的单位矩阵）&lt;br&gt;zeros(n1, n2) : n1 x n2 zero matrix&lt;br&gt;ones(n1, n2) : n1 x n2 matrix with every entry as 1&lt;br&gt;diag() : diagonal matrix （对角矩阵）&lt;br&gt;rand() : uniformly distributed random numbers&lt;br&gt;  repmat(B, 3, 1) : repmat()重复，3表示行重复了三次，1表示列重复了1次，类似于分块矩阵&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some Matrix Related Functions&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;max(A) -&amp;gt; 每一列最大的数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;sort(A)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;max(max(A)) -&amp;gt; 矩阵中最大的数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;sortrows(A)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;min(A)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;size(A)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;sum(A)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;length(A) -&amp;gt; 矩阵A行数和列数的较大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;mean(A)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;find(A)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上是按列（column）计算&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/14/juan-ji-he-juan-ji-shen-jing-wang-luo/</guid>
            <title>卷积和卷积神经网络</title>
            <link>https://chencc8.github.io/2022/03/14/juan-ji-he-juan-ji-shen-jing-wang-luo/</link>
            <category>深度学习</category>
            <pubDate>Mon, 14 Mar 2022 22:30:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;卷积和卷积神经网络&#34;&gt;&lt;a href=&#34;#卷积和卷积神经网络&#34; class=&#34;headerlink&#34; title=&#34;卷积和卷积神经网络&#34;&gt;&lt;/a&gt;卷积和卷积神经网络&lt;/h1&gt;&lt;h2 id=&#34;卷积&#34;&gt;&lt;a href=&#34;#卷积&#34; class=&#34;headerlink&#34; title=&#34;卷积&#34;&gt;&lt;/a&gt;卷积&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念&lt;/p&gt;
&lt;p&gt;一个系统，输入不稳定，输出稳定，用卷积求系统存量&lt;/p&gt;
&lt;p&gt;图像卷积操作：周围像素点对当前像素点如何产生影响&lt;/p&gt;
&lt;p&gt;一个过滤器的卷积核：一个像素点如何试探周围像素点，如何筛选图像特征&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但深度学习中的卷积实际上是指互相关&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;卷积神经网络概述&#34;&gt;&lt;a href=&#34;#卷积神经网络概述&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络概述&#34;&gt;&lt;/a&gt;卷积神经网络概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;卷积神经网络包括全连接层（fully connected layers），卷积层（Convolution layer），池化层（Pooling layer）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将图像拆分成对应特征，称为卷积核，扫描查看目标图有无对应卷积核来确认是否为目标物体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用卷积核扫描目标图得出一个二维矩阵（即特征图）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理边缘时的操作叫&lt;strong&gt;填充&lt;/strong&gt;（Padding），如果对图像采用最大池化，或者要保持图像大小不变，则需要在边缘补零来提取边缘特征&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于一个有大量细节，或者说相当数量分层级的细节来说，算法复杂度过高，所以有池化，即&lt;strong&gt;缩小特征图&lt;/strong&gt;（Feature Map），池化要求&lt;strong&gt;保留原特征图的特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最常用的两种池化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最大池化：选择被扫描区域内的最大值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平均池化：取被扫描区域内的平均值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;卷积计算中一个基本流程：卷积，ReLU（修正线性单元），池化（下采样）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后把特征图展开得到特征数组，得到概率数，用大数据修正卷积核和全连接，然后用反向传播不断训练得到近似的权重&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开始卷积核和权重是随机的，通过大量的数据和反馈来训练得到参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;从全连接到卷积层&#34;&gt;&lt;a href=&#34;#从全连接到卷积层&#34; class=&#34;headerlink&#34; title=&#34;从全连接到卷积层&#34;&gt;&lt;/a&gt;从全连接到卷积层&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于大图片来说使用单隐藏层MLP导致所需内存过大，不适用于对图片的分类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;卷积核遵循两个原则：&lt;strong&gt;平移不变性&lt;/strong&gt;，&lt;strong&gt;局部性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出Y是扫描整个图像后与卷积核对应大小的&lt;strong&gt;X&lt;/strong&gt;和&lt;strong&gt;W&lt;/strong&gt;（卷积核）的&lt;strong&gt;哈达玛积&lt;/strong&gt;求和（不是矩阵乘法！！！）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重新考察全连接层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;输入和输出变形为矩阵（宽度，高度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原先是将矩阵打平，现在需要空间信息，所以要保留形状&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为输入输出都加了一维，所以权重变为&lt;strong&gt;四维张量&lt;/strong&gt;（相当于输入为k*l大小的矩阵，输出为i*j大小的矩阵）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;卷积核不能随位置的变化而变化（平移不变性）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当在图片中形成一个识别器后，在一定像素大小的范围内，它都有自己的权重，当这个识别器在图片上换位置之后，他的权重应该不变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于一张图片应该有多个卷积核，但是&lt;strong&gt;每个卷积核要识别一个不同的特征&lt;/strong&gt;，一个卷积核就是一个识别器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将卷积核大小限制在一定范围内，只关注x(i,j)附近的值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;卷积层&#34;&gt;&lt;a href=&#34;#卷积层&#34; class=&#34;headerlink&#34; title=&#34;卷积层&#34;&gt;&lt;/a&gt;卷积层&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二维卷积层&lt;/p&gt;
&lt;p&gt;  h：height，w：weight&lt;/p&gt;
&lt;p&gt;  输入&lt;strong&gt;X&lt;/strong&gt;：nh * nw&lt;/p&gt;
&lt;p&gt;  核&lt;strong&gt;w&lt;/strong&gt;：kh * kw&lt;/p&gt;
&lt;p&gt;  偏差b ∈ R&lt;/p&gt;
&lt;p&gt;  输出&lt;strong&gt;Y&lt;/strong&gt;：（nh - kh + 1）*（nw - kw + 1） &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交叉相关 VS 卷积&lt;/p&gt;
&lt;p&gt;  卷积核（实际上是二位交叉相关）旋转180°得到二维卷积&lt;/p&gt;
&lt;p&gt;  由于对称性，在实际使用中没有区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一维和三维交叉相关&lt;/p&gt;
&lt;p&gt;  一维：文本，语言，时序序列&lt;/p&gt;
&lt;p&gt;  三维：视频，医学图像，气象地图&lt;/p&gt;
&lt;p&gt;  二维图象是主流&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;卷积解决了权重随输入变得过大的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; d2l &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 二维互相关运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;corr2d&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;X, K&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    h, w = K.shape&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Y = torch.zeros((X.shape[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] - h + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, X.shape[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] - w + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 输出的大小为（X.shape[0] - K.shape[0] + 1）*（X.shape[1] - K.shape[1] + 1）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(Y.shape[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(Y.shape[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# X（输入）和K（卷积核）哈达玛积求和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 遍历X中与K大小相同的所有矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Y[i, j] = (X[i:i + h, j:j + w] * K).&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# X = torch.tensor([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# K = torch.tensor([[0.0, 1.0], [2.0, 3.0]])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(corr2d(X, K))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 实现二维卷积层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Conv2D&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, kernel_size&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.weight = nn.Parameter(torch.rand(kernel_size))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# bias计算利用了广播机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.bias = nn.Parameter(torch.zeros(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; corr2d(x, self.weight) + self.bias&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.ones((&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X[:, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;K = torch.tensor([[&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y = corr2d(X, K)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# nn.Conv2d的参数：通道数，批量大小数，卷积核大小等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conv2d = nn.Conv2d(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, kernel_size=(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;), bias=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = X.reshape((&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y = Y.reshape((&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Y_hat = conv2d(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = (Y_hat - Y)**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv2d.zero_grad()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;().backward()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 学习率：3e-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 手写一个权重衰退&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv2d.weight.data[:] -= &lt;span class=&#34;number&#34;&gt;3e-2&lt;/span&gt; * conv2d.weight.grad&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) % &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&#39;batch &lt;span class=&#34;subst&#34;&gt;{i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;, loss &lt;span class=&#34;subst&#34;&gt;{l.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(): &lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;f}&lt;/span&gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conv2d.weight.data.reshape((&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;卷积层里的填充与步幅&#34;&gt;&lt;a href=&#34;#卷积层里的填充与步幅&#34; class=&#34;headerlink&#34; title=&#34;卷积层里的填充与步幅&#34;&gt;&lt;/a&gt;卷积层里的填充与步幅&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;填充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原因：更大的卷积核可以更快地减小输出大小，形状从nh * nw较少到（nh - kh + 1）*（nw - kw + 1）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填充（paddinng）：在输入周围添加额外的行/列，来&lt;strong&gt;控制输出形状的减少量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填充ph行和pw列，输出形状为（nh - kh + ph + 1）*（nh - kh + ph + 1）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;通常取ph = kh - 1，pw = kw - 1&lt;/strong&gt;（因为可以消去nh - kh + ph + 1中的- kh + 1）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当kh为奇数：在上下两侧填充ph/2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当kh为偶数：在上侧填充⌈ph/2⌉（向上取整），在下侧填充⌊ph/2⌋（向下取整）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;步幅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;步幅（stride）是指卷积核在行/列的滑动步长，可以&lt;strong&gt;成倍地减少输出形状&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给定高度sh和宽度sw的步幅，输出形状是⌊(nh − kh + ph + sh )/sh ⌋ × ⌊(nw − kw + pw + sw )/sw ⌋（向下取整）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果ph = kh - 1，pw = kw - 1，输出形状为⌊(nh + sh − 1)/sh ⌋ × ⌊(nw + sw − 1)/sw ⌋&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果输入高度和宽度可以被步幅整除  (nh /sh) × (nw /sw)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;comp_conv2d&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;conv2d, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    X = X.reshape((&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + X.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Y = conv2d(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Y.reshape(Y.shape[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 上下左右各填充一行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conv2d = nn.Conv2d(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, kernel_size=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, padding=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.rand(size=(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(comp_conv2d(conv2d, X).shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 将高度和宽度步幅设为2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conv2d = nn.Conv2d(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, kernel_size=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, padding=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, stride=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;comp_conv2d(conv2d, X).shape&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 稍微复杂一点的例子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conv2d = nn.Conv2d(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, kernel_size=(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), padding=(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), stride=(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;comp_conv2d(conv2d, X).shape&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 可以用过控制填充和步幅来控制图片长宽比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;卷积层里的多输入多输出通道&#34;&gt;&lt;a href=&#34;#卷积层里的多输入多输出通道&#34; class=&#34;headerlink&#34; title=&#34;卷积层里的多输入多输出通道&#34;&gt;&lt;/a&gt;卷积层里的多输入多输出通道&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多个输入通道&lt;br&gt;  彩色图像可能有RGB三个通道&lt;br&gt;  转换为灰度会丢失信息&lt;br&gt;  每个通道都有一个卷积核，结果是所有卷积结果的和&lt;/p&gt;
&lt;p&gt;  输入&lt;strong&gt;X&lt;/strong&gt;：ci × nh × nw&lt;br&gt;  核&lt;strong&gt;W&lt;/strong&gt;：ci × kh × kw&lt;br&gt;  输入&lt;strong&gt;Y&lt;/strong&gt;：mh × mw&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个输出通道&lt;br&gt;  可以有多个三维卷积核，每个核生成一个输出通道，即&lt;strong&gt;每个核对应图片的一个特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  输入&lt;strong&gt;X&lt;/strong&gt;：ci × nh × nw&lt;br&gt;  核&lt;strong&gt;W&lt;/strong&gt;：c0 × ci × kh ×kw&lt;br&gt;  输出&lt;strong&gt;Y&lt;/strong&gt;：c0 × mh × mw&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个输入和输出通道&lt;br&gt;  每个输出通道可以识别特定模式&lt;br&gt;  输入通道核识别并组合输入中的模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 × 1卷积核&lt;br&gt;  kh = kw = 1是一个受欢迎的选择。它不识别空间模式，&lt;strong&gt;只是融合通道&lt;/strong&gt;&lt;br&gt;  因为他不能识别当前像素点周围的信息，即不能识别空间信息&lt;br&gt;  &lt;strong&gt;相当于输入形状为nhnw × ci，权重为c0 × ci的全连接层&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二维卷积层&lt;br&gt;  输入&lt;strong&gt;X&lt;/strong&gt;：ci × nh × nw&lt;br&gt;  核&lt;strong&gt;W&lt;/strong&gt;：c0 × ci × kh × kw&lt;br&gt;  偏差&lt;strong&gt;B&lt;/strong&gt;：co × ci&lt;br&gt;  输出&lt;strong&gt;Y&lt;/strong&gt;：c0 × mh × mw&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; d2l &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;corr2d_multi_in&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;X, K&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(d2l.corr2d(x, k) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x, k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;zip&lt;/span&gt;(X, K))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.tensor([[[&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;6.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8.0&lt;/span&gt;]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  [[&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;4.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6.0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;7.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9.0&lt;/span&gt;]]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;K = torch.tensor([[[&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;]], [[&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4.0&lt;/span&gt;]]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(corr2d_multi_in(X, K))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;corr2d_multi_in_out&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;X, K&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; torch.stack([corr2d_multi_in(X, k) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; K], &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# concat沿着已有的维度拼接，stack在新创建的维度上拼接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;K = torch.stack((K, K + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, K + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(K.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(corr2d_multi_in_out(X, K))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1 x 1 卷积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;corr2d_multi_in_out_1x1&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;X, K&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c_i, h, w = X.shape[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c_o = K.shape[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    X = X.reshape((c_i, h * w))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    K = K.reshape((c_o, c_i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Y = torch.matmul(K, X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Y.reshape(c_o, h, w)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.normal(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# K的输出通道为2，即有两个卷积核，输入通道为3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;K = torch.normal(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y1 = corr2d_multi_in_out_1x1(X, K)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y2 = corr2d_multi_in_out(X, K)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;(torch.&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(Y1 - Y2).&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;()) &amp;lt; &lt;span class=&#34;number&#34;&gt;1e-6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/11/shen-du-xue-xi-pytorch-shen-jing-wang-luo-ji-chu/</guid>
            <title>深度学习-PyTorch神经网络基础</title>
            <link>https://chencc8.github.io/2022/03/11/shen-du-xue-xi-pytorch-shen-jing-wang-luo-ji-chu/</link>
            <category>深度学习</category>
            <pubDate>Fri, 11 Mar 2022 18:55:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-PyTorch神经网络基础&#34;&gt;&lt;a href=&#34;#深度学习-PyTorch神经网络基础&#34; class=&#34;headerlink&#34; title=&#34;深度学习-PyTorch神经网络基础&#34;&gt;&lt;/a&gt;深度学习-PyTorch神经网络基础&lt;/h1&gt;&lt;h2 id=&#34;模型构造&#34;&gt;&lt;a href=&#34;#模型构造&#34; class=&#34;headerlink&#34; title=&#34;模型构造&#34;&gt;&lt;/a&gt;模型构造&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch.nn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; functional &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义了一些没有包括参数的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Module是torch核心&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential(nn.Linear(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;), nn.ReLU(), nn.Linear(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 这里参数自动初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# nn.Sequential定义了一个特殊的Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 任何一个层或神经网络都是Module的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.rand(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(net(X))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 多层感知机的实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MLP&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 是nn.Module的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 所有的Module都有这两种重要的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.hidden = nn.Linear(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.out = nn.Linear(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 前向函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.out(F.relu(self.hidden(X)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# net = MLP()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(net(X))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# forward函数不需要调用是因为nn.Module中将__call__函数等价于forward函数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Sequential类的作用：把传进来的层按顺序存添加到模块中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MySequential&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; block &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; args:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self._modules[block] = block&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对所有传进来的层都放在_modules特殊的容器中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# _module是一个ordered dict&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; block &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; self._modules.values():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            X = block(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; X&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# net = MySequential(nn.Linear(20, 256), nn.ReLU(), nn.Linear(256, 10))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(net(X))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FixedHiddenMLP&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# rand_weight不参加训练，不能计算梯度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.rand_weight = torch.rand((&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;), requires_grad=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 非首次初始化需要设置require_grad为True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.linear = nn.Linear(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        X = self.linear(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        X = F.relu(torch.mm(X, self.rand_weight) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        X = self.linear(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; X.&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;().&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;() &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            X /= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; X.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# net = FixedHiddenMLP()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(net(X))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 可以嵌套使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NestMLP&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.net = nn.Sequential(nn.Linear(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;), nn.ReLU(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                 nn.Linear(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;), nn.ReLU())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.linear = nn.Linear(&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.linear(self.net(X))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chimera = nn.Sequential(NestMLP(), nn.Linear(&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;), FixedHiddenMLP())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chimera(X)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参数管理&#34;&gt;&lt;a href=&#34;#参数管理&#34; class=&#34;headerlink&#34; title=&#34;参数管理&#34;&gt;&lt;/a&gt;参数管理&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential(nn.Linear(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;), nn.ReLU(), nn.Linear(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.rand(size=(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# state 状态 OrderedDict类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# net[2]表示最后一层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].state_dict())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].bias))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# &amp;lt;class &#39;torch.nn.parameter.Parameter&#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# parameter定义的是可以优化的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].bias)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].bias.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 通过.data和.grad访问参数值和梯度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 没有进行反向传播，所以没有梯度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].weight.grad == &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 一次性访问所有参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# *号解压可迭代对象,在列表前加*号,会将列表拆分成一个一个的独立元素,不光是列表、元组、字典，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 通过named_parameters()函数获取整个网络的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(*[(name, param.shape) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name, param &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; net[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].named_parameters()])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(*[(name, param.shape) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name, param &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; net.named_parameters()])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net.state_dict()[&lt;span class=&#34;string&#34;&gt;&#39;2.bias&#39;&lt;/span&gt;].data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 从嵌套块收集参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;block1&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nn.Sequential(nn.Linear(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;), nn.ReLU(), nn.Linear(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                         nn.ReLU())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;block2&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    net = nn.Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        net.add_module(&lt;span class=&#34;string&#34;&gt;f&#39;block&lt;span class=&#34;subst&#34;&gt;{i}&lt;/span&gt;&#39;&lt;/span&gt;, block1())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; net&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rgnet = nn.Sequential(block2(), nn.Linear(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(rgnet(X))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(rgnet)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 内置初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;init_normal&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;m&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(m) == nn.Linear:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 判断是否为全连接层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 加_表示替换函数，直接改变输入的值，不返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nn.init.normal_(m.weight, mean=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, std=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nn.init.zeros_(m.bias)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# apply()对所有的层进行遍历修改参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 给一个方式遍历整个神经网络进行修改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.apply(init_normal)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].weight.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], net[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].bias.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;init_constant&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;m&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(m) == nn.Linear:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       nn.init.constant_(m.weight, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       nn.init.zeros_(m.bias)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.apply(init_constant)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(net[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].weight.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], net[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].bias.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对某些块使用不同的初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;xavier&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;m&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(m) == nn.Linear:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nn.init.xavier_uniform_(m.weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;init_42&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;m&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(m) == nn.Linear:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nn.init.constant_(m.weight, &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 自定义初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 可以直接替换修改或者自定义一个初始化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 参数绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 参数共享&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shared = nn.Linear(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 若修改其中一个参数，共享的参数也改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential(nn.Linear(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;), nn.ReLU(), shared, nn.ReLU(), shared, nn.ReLU(), nn.Linear(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net(X)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;自定义层&#34;&gt;&lt;a href=&#34;#自定义层&#34; class=&#34;headerlink&#34; title=&#34;自定义层&#34;&gt;&lt;/a&gt;自定义层&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CenteredLayer&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; X - X.mean()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;layer = CenteredLayer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(layer(torch.FloatTensor([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential(nn.Linear(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;), CenteredLayer())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y = net(torch.rand(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(Y.mean())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 带参数的层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyLinear&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, in_units, units&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 需要把参数放进Parameter里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.weight = nn.Parameter(torch.randn(in_units, units))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.bias = nn.Parameter(torch.randn(units, ))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        linear = torch.matmul(X, self.weight.data) + self.bias.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; F.relu(linear)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dense = MyLinear(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dense.weight&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;读取文件&#34;&gt;&lt;a href=&#34;#读取文件&#34; class=&#34;headerlink&#34; title=&#34;读取文件&#34;&gt;&lt;/a&gt;读取文件&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读写文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = torch.arange(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.save(x, &lt;span class=&#34;string&#34;&gt;&#39;x-file&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x2 = torch.load(&lt;span class=&#34;string&#34;&gt;&#39;x-file&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 存储列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = torch.zeros(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.save([x, y], &lt;span class=&#34;string&#34;&gt;&#39;x-files&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x2, y2 = torch.load(&lt;span class=&#34;string&#34;&gt;&#39;x-files&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(x2, y2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 存储字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mydict = {&lt;span class=&#34;string&#34;&gt;&#39;x&#39;&lt;/span&gt;: x, &lt;span class=&#34;string&#34;&gt;&#39;y&#39;&lt;/span&gt;: y}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.save(mydict, &lt;span class=&#34;string&#34;&gt;&#39;mydict&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mydict2 = torch.load(&lt;span class=&#34;string&#34;&gt;&#39;mydict&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mydict2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 加载和保存模型参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MLP&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.hidden = nn.Linear(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.output = nn.Linear(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.output(F.relu(self.hidden(x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = MLP()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = torch.randn(size=(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y = net(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# pytorch不能把整个模型的定义存储下来（有别的方法）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 存储权重即可，但读取的时候要重新实例化一个模型，计算部分不存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读取时需要把模型定义带走&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 将模型参数存储为字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.save(net.state_dict(), &lt;span class=&#34;string&#34;&gt;&#39;mlp.params&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# load&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;clone = MLP()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;clone.load_state_dict(torch.load(&lt;span class=&#34;string&#34;&gt;&#39;mlp.params&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;clone.&lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y_clone = clone(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Y_clone == Y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/09/shu-ju-fen-xi-xi-la/</guid>
            <title>数据分析-希腊</title>
            <link>https://chencc8.github.io/2022/03/09/shu-ju-fen-xi-xi-la/</link>
            <category>数据分析</category>
            <pubDate>Wed, 09 Mar 2022 16:20:38 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;好想去希腊啊啊啊&#34;&gt;&lt;a href=&#34;#好想去希腊啊啊啊&#34; class=&#34;headerlink&#34; title=&#34;好想去希腊啊啊啊&#34;&gt;&lt;/a&gt;好想去希腊啊啊啊&lt;/h1&gt;&lt;p&gt;因为想去希腊旅游，所以顺便做了一份小小的攻略（算是吧  &lt;span class=&#34;github-emoji&#34;&gt;&lt;span&gt;😳&lt;/span&gt;&lt;img src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8&#34; aria-hidden=&#34;true&#34; onerror=&#34;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;main&#34;&gt;&lt;a href=&#34;#main&#34; class=&#34;headerlink&#34; title=&#34;main&#34;&gt;&lt;/a&gt;main&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; csv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; plan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 主页网址及请求头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;urls = [&lt;span class=&#34;string&#34;&gt;&#39;https://you.ctrip.com/countrysightlist/greece100036/p{}.html&#39;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(i) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&#39;user-agent&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pd.set_option(&lt;span class=&#34;string&#34;&gt;&#39;display.unicode.ambiguous_as_wide&#39;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pd.set_option(&lt;span class=&#34;string&#34;&gt;&#39;display.unicode.east_asian_width&#39;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获取源代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;gethtmltext&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res = requests.get(url, headers=headers, timeout=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.raise_for_status()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.encoding = res.apparent_encoding&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 主页解析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;parsepage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    links1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    text = gethtmltext(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    soup = BeautifulSoup(text, &lt;span class=&#34;string&#34;&gt;&#39;html.parser&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    items = soup.select(&lt;span class=&#34;string&#34;&gt;&#39;div.list_mod1&amp;gt;dl&amp;gt;dd&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; items:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tag = i.find(&lt;span class=&#34;string&#34;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name = tag.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        link = tag[&lt;span class=&#34;string&#34;&gt;&#39;href&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        links1.append([name, link])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; links1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获得景点速览链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getlinks3&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    links3 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    links4 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    links5 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; url &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; urls:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        links = parsepage(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        links3.append(links)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; links3:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; j:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            links4.append(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(links4), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        links5.append(&lt;span class=&#34;string&#34;&gt;&#39;https://you.ctrip.com/&#39;&lt;/span&gt; + links4[k][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; links5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获得链接中的数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getdigit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = &lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;.isdigit, url))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    digit = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;.join(url))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; digit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 景点速览页面解析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;parsepages&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;links&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    names1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wenttimes = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wanttimes = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; link &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; links:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.get(link, headers=headers, timeout=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        text = r.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        soup = BeautifulSoup(text, &lt;span class=&#34;string&#34;&gt;&#39;html.parser&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 获取城市名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        item = soup.select(&lt;span class=&#34;string&#34;&gt;&#39;div.f_left h1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; item:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tag = i.find(&lt;span class=&#34;string&#34;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name = tag.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            names1.append(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 爬取动态网页数据（XHR）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        resource = getdigit(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&#39;Resource&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;{}&#39;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(resource),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&#39;pageType&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;Place&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.post(&lt;span class=&#34;string&#34;&gt;&#34;https://you.ctrip.com/Destinationsite/SharedComm/ShowGowant&#34;&lt;/span&gt;, data=data, headers=headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wenttime = r.json()[&lt;span class=&#34;string&#34;&gt;&#39;WentTimes&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wanttime = r.json()[&lt;span class=&#34;string&#34;&gt;&#39;WantTimes&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wenttimes.append(wenttime)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wanttimes.append(wanttime)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    datas = np.array([names1, wenttimes, wanttimes]).T&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;希腊各城市旅游人数.csv&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;w&#39;&lt;/span&gt;, newline=&lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; file:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        csv_writer = csv.writer(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        csv_writer.writerows(datas)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 画出柱状图以及饼图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;drawpicture&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;希腊各城市旅游人数.csv&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;rt&#39;&lt;/span&gt;, newline=&lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; file:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        csv_reader = csv.reader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        names1 = [row[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; csv_reader]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;希腊各城市旅游人数.csv&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;rt&#39;&lt;/span&gt;, newline=&lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; file:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        csv_reader = csv.reader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wenttimes = [row[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; csv_reader]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;希腊各城市旅游人数.csv&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;rt&#39;&lt;/span&gt;, newline=&lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; file:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        csv_reader = csv.reader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wanttimes = [row[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; csv_reader]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wenttimes = [&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;(x) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; wenttimes]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wanttimes = [&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;(x) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; wanttimes]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.rcParams[&lt;span class=&#34;string&#34;&gt;&#39;font.family&#39;&lt;/span&gt;] = [&lt;span class=&#34;string&#34;&gt;&#39;SimHei&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.subplot(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.xticks(rotation=&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.title(&lt;span class=&#34;string&#34;&gt;&#39;各个城市旅游人数&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.xlabel(&lt;span class=&#34;string&#34;&gt;&#39;城市&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = names1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y1 = wenttimes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y2 = wanttimes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.plot(x, y1, label=&lt;span class=&#34;string&#34;&gt;&#39;去过&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.plot(x, y2, label=&lt;span class=&#34;string&#34;&gt;&#39;想去&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.subplot(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    labels = names1[:&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nums = wenttimes[:&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.pie(nums, labels=labels, autopct=&lt;span class=&#34;string&#34;&gt;&#39;%0.1f%%&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 排序存csv&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sortvalue&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;links&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df = pd.read_csv(&lt;span class=&#34;string&#34;&gt;&#39;希腊各城市旅游人数.csv&#39;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&#39;,&#39;&lt;/span&gt;, header=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = links&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df.sort_values(by=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, inplace=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, axis=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, ascending=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cities = df.loc[:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cities.to_csv(&lt;span class=&#34;string&#34;&gt;&#39;希腊热门城市.csv&#39;&lt;/span&gt;, index=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, header=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    links = getlinks3()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parsepages(links)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    drawpicture()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sortvalue(links)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lastlinks = plan.getplacelink()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plan.getinformation(lastlinks)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    plan.cloudpicture()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;plan包&#34;&gt;&lt;a href=&#34;#plan包&#34; class=&#34;headerlink&#34; title=&#34;plan包&#34;&gt;&lt;/a&gt;plan包&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; csv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; wordcloud&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; jieba&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jieba.setLogLevel(jieba.logging.INFO)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&#39;user-agent&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poiID = [&lt;span class=&#34;string&#34;&gt;&#39;78674&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;89074&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;10532420&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;89071&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;98597&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;95446&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;95468&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;13271242&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;95469&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;10547255&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;96613&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;98965&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;96623&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;81903&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获得各城市景点链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getplacelink&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df = pd.read_csv(&lt;span class=&#34;string&#34;&gt;&#39;希腊热门城市.csv&#39;&lt;/span&gt;, delimiter=&lt;span class=&#34;string&#34;&gt;&#39;,&#39;&lt;/span&gt;, header=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    link = df[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lastlinks = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; link:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.get(i, headers=headers, timeout=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        soup = BeautifulSoup(r.text, &lt;span class=&#34;string&#34;&gt;&#39;html.parser&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ii = soup.select(&lt;span class=&#34;string&#34;&gt;&#39;div.rdetailbox&amp;gt;dl&amp;gt;dt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; ii:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tag = i.find(&lt;span class=&#34;string&#34;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lastlink = tag[&lt;span class=&#34;string&#34;&gt;&#39;href&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lastlinks.append(lastlink)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lastlinks.pop(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lastlinks&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 获得景点列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getinformation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;lastlinks&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    names = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scores = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    opentimes = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    comments = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    count = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ID = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ids &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; poiID:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; page &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            payload = {&lt;span class=&#34;string&#34;&gt;&#34;arg&#34;&lt;/span&gt;:{&lt;span class=&#34;string&#34;&gt;&#34;channelType&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;collapseType&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;commentTagId&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;pageIndex&#34;&lt;/span&gt;:page,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;pageSize&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;poiId&#34;&lt;/span&gt;: ids,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;sourceType&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;sortType&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;string&#34;&gt;&#34;starType&#34;&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;},&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       &lt;span class=&#34;string&#34;&gt;&#34;head&#34;&lt;/span&gt;:{&lt;span class=&#34;string&#34;&gt;&#34;cid&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;09031145113668832314&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;ctok&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;cver&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;1.0&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;lang&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;01&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;sid&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;8888&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;syscode&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;09&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;auth&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;xsid&#34;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&#34;&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;string&#34;&gt;&#34;extension&#34;&lt;/span&gt;:[]}}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ID.append(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; lastlink &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; lastlinks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.get(lastlink, headers=headers, timeout=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        soup = BeautifulSoup(r.text, &lt;span class=&#34;string&#34;&gt;&#39;html.parser&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ii = soup.select(&lt;span class=&#34;string&#34;&gt;&#39;div.title&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 获取各城市景点名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; ii:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tag = i.find(&lt;span class=&#34;string&#34;&gt;&#39;h1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name = tag.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            names.append(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 获取各景点评论&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x1 &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r = requests.post(&lt;span class=&#34;string&#34;&gt;&#39;https://m.ctrip.com/restapi/soa2/13444/json/getCommentCollapseList&#39;&lt;/span&gt;, data=json.dumps(ID[x]), headers=headers).text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            html = json.loads(r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            items = html[&lt;span class=&#34;string&#34;&gt;&#39;result&#39;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&#39;items&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; items:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                comment = i[&lt;span class=&#34;string&#34;&gt;&#39;content&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                comments.append(comment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(y) + &lt;span class=&#34;string&#34;&gt;&#39;.csv&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;w&#39;&lt;/span&gt;, newline=&lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; file:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            csv_writer = csv.writer(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            csv_writer.writerows(comments)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        comments.clear()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = y + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 词云&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;cloudpicture&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image_save = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; a &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        image_save.append(&lt;span class=&#34;string&#34;&gt;f&#39;D://xila//&lt;span class=&#34;subst&#34;&gt;{a + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;.png&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f = &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(i) + &lt;span class=&#34;string&#34;&gt;&#39;.csv&#39;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        text0 = f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        text = text0.replace(&lt;span class=&#34;string&#34;&gt;&#39;，&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;。&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;：&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;！&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;？&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;“&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;【&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;】&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;；&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;,&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;#&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;;&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;、&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&#39;&#34;&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        txt_list = jieba.lcut(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        texts = &lt;span class=&#34;string&#34;&gt;&#39; &#39;&lt;/span&gt;.join(txt_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        word_path = &lt;span class=&#34;string&#34;&gt;&#39;msyh.ttc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cloud = wordcloud.WordCloud(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    font_path=word_path,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    background_color=&lt;span class=&#34;string&#34;&gt;&#34;white&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    scale=&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    stopwords={&lt;span class=&#34;string&#34;&gt;&#39;的&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;是&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x20&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;了&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x0A&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x2F&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x0D&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;和&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;去&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x0Ax0A&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;xOAxOA&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                               &lt;span class=&#34;string&#34;&gt;&#39;xOAxO9xOA&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x0Ax09x0A&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;x0Ax0A&#39;&lt;/span&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cloud.generate(texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cloud.to_file(image_save[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当然代码还是不够完美，以后会慢慢改进的&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/08/shen-du-xue-xi-shu-zhi-wen-ding-xing-mo-xing-chu-shi-hua-he-ji-huo-han-shu/</guid>
            <title>深度学习-数值稳定性+模型初始化和激活函数</title>
            <link>https://chencc8.github.io/2022/03/08/shen-du-xue-xi-shu-zhi-wen-ding-xing-mo-xing-chu-shi-hua-he-ji-huo-han-shu/</link>
            <category>深度学习</category>
            <pubDate>Tue, 08 Mar 2022 14:43:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-数值稳定性-模型初始化和激活函数&#34;&gt;&lt;a href=&#34;#深度学习-数值稳定性-模型初始化和激活函数&#34; class=&#34;headerlink&#34; title=&#34;深度学习-数值稳定性+模型初始化和激活函数&#34;&gt;&lt;/a&gt;深度学习-数值稳定性+模型初始化和激活函数&lt;/h1&gt;&lt;h2 id=&#34;数值稳定性&#34;&gt;&lt;a href=&#34;#数值稳定性&#34; class=&#34;headerlink&#34; title=&#34;数值稳定性&#34;&gt;&lt;/a&gt;数值稳定性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;/p&gt;
&lt;p&gt;  有关数值稳定性的典型问题是衰减和爆炸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;来源&lt;/p&gt;
&lt;p&gt;  设神经网络有d层，计算损失l关于参数wt的梯度，需要做（d-t）次矩阵乘法，容易引起梯度爆炸和梯度消失，&lt;strong&gt;本质上都是由于深度神经网络的反向传播造成的&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;梯度爆炸的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;值超出值域（infinity）&lt;/p&gt;
&lt;p&gt;  对于16位浮点数尤为严重（数值区间6e-5 - 6e4）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对学习率敏感&lt;br&gt;  学习率太大 -&amp;gt; 大参数值 -&amp;gt; 更大的梯度&lt;/p&gt;
&lt;p&gt;  （反向传播，学习率变大 -&amp;gt; 参数值变大 -&amp;gt; 梯度变大）&lt;/p&gt;
&lt;p&gt;  学习率太小 -&amp;gt; 训练无进展&lt;/p&gt;
&lt;p&gt;  需要在训练过程中不管调整学习率&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;梯度消失的问题&lt;/p&gt;
&lt;p&gt;  以sigmoid激活函数为例，当输入较大时，sigmoid激活函数的梯度变得很小，趋近于0。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;梯度值变成0&lt;/p&gt;
&lt;p&gt;  对于16位浮点数尤为严重（数值区间6e-5 - 6e4）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练没有进展（不管如何选择学习率）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于底部层尤为严重&lt;/p&gt;
&lt;p&gt;  仅仅顶部层训练的较好&lt;/p&gt;
&lt;p&gt;  无法让神经网络更深（无论有多少层，都和一个浅层神经网络类似）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于学习率η&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学习率过大，会导致&lt;strong&gt;参数弹跳&lt;/strong&gt;，损失项&lt;strong&gt;可能不会在每次迭代都下降&lt;/strong&gt;，使损失项错过最小值，反而导致参数变大，使梯度变大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习率过小，难以到达最小值，收敛的很慢，导致训练无进展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;推荐学习率：0.001， 0.003，0.01， 0.03， 0.1， 0.3， 1 ……（成三倍增长）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  （自动收敛测试方法：当损失项的值小于一个很小的值ε（可以是1e-3）时，判断为已收敛，但是一般来说，选取一个合适的阈值ε是非常困难的，所以要找到一个合适的阈值更好的方法还是画曲线图。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模型初始化&#34;&gt;&lt;a href=&#34;#模型初始化&#34; class=&#34;headerlink&#34; title=&#34;模型初始化&#34;&gt;&lt;/a&gt;模型初始化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;让训练更加稳定&lt;/p&gt;
&lt;p&gt;  目标：让梯度值在合理的范围内（如[1e-6, 1e3]）&lt;/p&gt;
&lt;p&gt;  方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将乘法变加法，如ResNet，LSTM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;归一化，如梯度归一化（如把梯度改为均值，方差为固定数值的数，把梯度拉到一定范围内），梯度裁剪（强行把梯度减到一个范围内，如大于5则变为5，小于-5则变为-5）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合理的权重初始和激活函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;让每层的方差是一个常数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将每层的输出和梯度都看作随机变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;让他们的均值和方差都保持一致&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;权重初始化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在合理值区间里随机出是参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练开始的时候更容易有数值不稳定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;远离最优解的地方损失函数表面可能很复杂。（导致梯度很大，从而导致更大的参数值）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最优解附近表面可能会比较平&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用N(0, 0.01)来初始可能对小网络没问题，但不能保证深度神经网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xavier初始&lt;/p&gt;
&lt;p&gt;  原因：难以满足输入值个数(nt-1)和输出值个数(nt)相同&lt;/p&gt;
&lt;p&gt;  Xavier使得  t层方差   = （t层输入值个数）+（t层输出值个数）/  2&lt;/p&gt;
&lt;p&gt;  适配权重形状变换，特别是nt&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;激活函数&#34;&gt;&lt;a href=&#34;#激活函数&#34; class=&#34;headerlink&#34; title=&#34;激活函数&#34;&gt;&lt;/a&gt;激活函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;据推理可得所使用的激活函数必须是它本身，即σ(x) = x&lt;/p&gt;
&lt;p&gt;  sigmoid(x) = 1/2 + x/4 - x^3 / 48 + O(x^5)&lt;/p&gt;
&lt;p&gt;  relu(x) = 0 + x     for x &amp;gt;= 0&lt;/p&gt;
&lt;p&gt;  tanh(x) = 0 + x - x^3 / 3 + O(x*x*x*x*x)&lt;/p&gt;
&lt;p&gt;  relu(x)与tanh(x)符合条件&lt;/p&gt;
&lt;p&gt;  sigmoid函数需要调整为  4*sigmoid(x)-2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;QA&#34;&gt;&lt;a href=&#34;#QA&#34; class=&#34;headerlink&#34; title=&#34;QA&#34;&gt;&lt;/a&gt;QA&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Q：nan,inf怎么产生，如何让解决？&lt;/p&gt;
&lt;p&gt;A：inf通常是权重初始值太大或者学习率太大&lt;/p&gt;
&lt;p&gt;nan通常是一个值除0&lt;/p&gt;
&lt;p&gt;解决：合理初始化权重，激活函数选择，学习率不要太大&lt;/p&gt;
&lt;p&gt;把学习率一直向小调整直到inf或nan不出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q：为什么16位浮点影响严重？&lt;/p&gt;
&lt;p&gt;A：传统高性能运算是64位，python的默认数据类型是64位，32位更常用。如芯片如果用16位浮点数，比32位快2倍，比64位快4倍。对做训练时的梯度有影响。bf16开始取代 fp16。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/07/shen-du-xue-xi-diu-qi-fa/</guid>
            <title>深度学习-丢弃法</title>
            <link>https://chencc8.github.io/2022/03/07/shen-du-xue-xi-diu-qi-fa/</link>
            <category>深度学习</category>
            <pubDate>Mon, 07 Mar 2022 19:18:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-丢弃法&#34;&gt;&lt;a href=&#34;#深度学习-丢弃法&#34; class=&#34;headerlink&#34; title=&#34;深度学习-丢弃法&#34;&gt;&lt;/a&gt;深度学习-丢弃法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;br&gt;  丢弃法也可以用来应对过拟合问题（倒置丢弃法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个好的模型需要对输入数据的扰动鲁棒&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当对隐藏层使用丢弃法时，该层的隐藏单元有一定概率被丢弃掉。设丢弃概率为p，那么p的概率为hi会被清零，有1-p的概率hi会除以1-p做拉伸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于在训练中隐藏层神经元的丢弃是随机的，即h1,……,hi都有可能被清零，&lt;strong&gt;输出层的计算无法过度依赖h1,……,hi中的任一个&lt;/strong&gt;，从而在训练模型时起到正则化的作用，并可以用来应对过拟合。&lt;/li&gt;
&lt;li&gt;在测试模型时，我们为了得到更加确定性的结果，一般&lt;strong&gt;不使用&lt;/strong&gt;丢弃法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;补充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丢弃法不改变其输入的期望值&lt;/li&gt;
&lt;li&gt;丢弃法在&lt;strong&gt;层中&lt;/strong&gt;加入噪音&lt;/li&gt;
&lt;li&gt;正则项只在&lt;strong&gt;训练中&lt;/strong&gt;使用&lt;/li&gt;
&lt;li&gt;使用有噪音的数据等价于Tikhonov正则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;丢弃法从零开始实现&#34;&gt;&lt;a href=&#34;#丢弃法从零开始实现&#34; class=&#34;headerlink&#34; title=&#34;丢弃法从零开始实现&#34;&gt;&lt;/a&gt;丢弃法从零开始实现&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; d2lzh &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; gluon, init, nd, autograd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet.gluon &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; loss &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gloss, nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dropout&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;X, drop_prob&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;lt;= drop_prob &amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# assert 表达式，又称断言语句，可以看作是功能缩小版的if语句，用于判断表达式的值，如果为错，python解释器会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	keep_prob = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; - drop_prob&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; keep_prob == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; 	X.zeros_like()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 保留概率为0，即丢弃概率为1，返回与X形状相同的全为0的矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mask = nd.random.uniform(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, X.shape) &amp;lt; keep_prob&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# mask是一个由0和1组成的形状为X的矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# uniform()方法将随机生成下一个实数，它在[x, y]范围内。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mask * X / keep_prob&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 做乘法远比从中选元素快得多&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	num_inputs, num_outputs, num_hiddens1, num_hiddens2 = &lt;span class=&#34;number&#34;&gt;784&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 两个隐藏层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	w1 = nd.random.normal(scale=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, shape=(num_inputs, num_hiddens1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	b1 = nd.zeros(num_hiddens1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	w2 = nd.random.mormal(scale=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, shape=(num_hiddens1, num_hiddens2))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	b2 = nd.zeros(num_hiddens2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	w3 = nd.random.normal(scale=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, shape=(num_hiddens2, num_outputs))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	b3 = nd.zeros(num_outputs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	params = [w1, b1, w2, b2, w3, b3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; param &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		param.attach_grad()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 丢弃概率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	drop_prob1, drop_prob = &lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 相当于神经网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;net&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;X&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# 如果shape参数中包含特殊值-1，即将该数组打平，变成一维，先行后列。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		X = X.reshape((-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, num_inputs))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		H1 = (nd.dot(X, w1) + b1).relu()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# 只在训练模型时使用丢弃法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; autograd.is_training():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			H1 = dropout(H1, drop_prob1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 在第一层全连接层后添加丢弃层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		H2 = (nd.dot(H1, w2) + b2).relu()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; autograd.is_training():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			H2 = dropout(H2, drop_prob2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 在第二层全连接层后添加丢弃层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nd.dot(H2, w3) + b3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	num_epochs, lr, batch_size = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	loss = gloss.SoftmaxCrossEntropyLoss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, params, lr)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;丢弃法简洁实现&#34;&gt;&lt;a href=&#34;#丢弃法简洁实现&#34; class=&#34;headerlink&#34; title=&#34;丢弃法简洁实现&#34;&gt;&lt;/a&gt;丢弃法简洁实现&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 数据收集如上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.add(nn.Dense(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&#39;relu&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Dropout(drop_prob1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Dense(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&#39;relu&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Dropout(drop_prob2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Dense(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.initialize(init.Normal(sigma=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer = gluon.Trainer(net.collect_params(), &lt;span class=&#34;string&#34;&gt;&#39;sgd&#39;&lt;/span&gt;, {&lt;span class=&#34;string&#34;&gt;&#39;learning_rate&#39;&lt;/span&gt;: lr})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = gloss.SoftmaxCrossEntropyLoss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, trainer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/07/shen-du-xue-xi-quan-chong-shuai-tui/</guid>
            <title>深度学习-权重衰退</title>
            <link>https://chencc8.github.io/2022/03/07/shen-du-xue-xi-quan-chong-shuai-tui/</link>
            <category>深度学习</category>
            <pubDate>Mon, 07 Mar 2022 03:58:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-权重衰退&#34;&gt;&lt;a href=&#34;#深度学习-权重衰退&#34; class=&#34;headerlink&#34; title=&#34;深度学习-权重衰退&#34;&gt;&lt;/a&gt;深度学习-权重衰退&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用均方范数作为&lt;strong&gt;硬性&lt;/strong&gt;限制&lt;/p&gt;
&lt;p&gt;  通过限制参数值的选择范围来控制模型容量&lt;br&gt;  min l(&lt;strong&gt;W&lt;/strong&gt;, b)  subject to ||&lt;strong&gt;w&lt;/strong&gt;||2(平方) &amp;lt;= θ&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;硬性限制是指每个w都必须小于θ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  通常不限制偏移b(限不限制都差不多)(整个数据在零点的偏移)&lt;/p&gt;
&lt;p&gt;  小的θ意味着更强的正则项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用均方范数作为&lt;strong&gt;柔性&lt;/strong&gt;限制&lt;/p&gt;
&lt;p&gt;  罚（penalty）：λ/2*||&lt;strong&gt;w&lt;/strong&gt;||2&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;不是硬性要求，更平滑一点，不一定每一个w都在一定范围内&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  超参数λ控制了正则项的重要程度&lt;/p&gt;
&lt;p&gt;  通过增加λ来减小模型复杂度&lt;/p&gt;
&lt;p&gt;  λ等于0时，惩罚项完全不起作用&lt;/p&gt;
&lt;p&gt;  λ越大，使得最优解越向原点靠近，即趋近于零&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于图的理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;绿线：只优化损失函数的等高线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;黄线：罚，以原点为中心的等高线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;损失函数加正则项成为目标函数，目标函数最优解不是损失函数最优解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入罚之后原始解变得不是很优，对于罚来说很大，把最优解向原点拉动，l（损失）的值虽然变大，但罚的项变小。罚对原始最优解的拉动力较大，直到达到平衡点（增加值和减小值相等时）。总体来看，罚使得最优解向原点走。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先要明确的是，w选择范围过大会使得模型可以拟合任意函数，使模型复杂度过大，导致过拟合。所以解决过拟合问题的思路应该是使w下降，方法之一是权重衰退。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以过程大概是：过拟合 -&amp;gt; w过大 -&amp;gt; 为减小w，加入罚 -&amp;gt; 最优解向原点拉动 -&amp;gt; w绝对值减小 -&amp;gt; 权重衰退 -&amp;gt; 模型复杂度降低&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L2范数&lt;strong&gt;正则化&lt;/strong&gt;又称权重衰退&lt;/p&gt;
&lt;p&gt;权重衰退通过&lt;strong&gt;惩罚绝对值较大的模型参数&lt;/strong&gt;为需要学习的模型增加了限制，这可能对过拟合有效。&lt;/p&gt;
&lt;h2 id=&#34;权重衰退简洁实现&#34;&gt;&lt;a href=&#34;#权重衰退简洁实现&#34; class=&#34;headerlink&#34; title=&#34;权重衰退简洁实现&#34;&gt;&lt;/a&gt;权重衰退简洁实现&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; d2lzh &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; autograd, gluon, init, nd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet.gluon &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; loss &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gloss, data &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gdata, nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n_train, n_test, num_inputs = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;true_w, true_b = nd.ones((num_inputs, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) * &lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.05&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;features = nd.random.normal(shape=(n_train + n_test, num_inputs))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;labels = nd.dot(features, true_w) + true_b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;labels += nd.random.normal(scale=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, shape=labels.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_features, test_features = features[:n_train, :], features[n_train:, :]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_labels, test_labels = labels[:n_train], labels[n_train:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;batch_size, num_epochs, lr = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.03&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fit_and_plot_gluon&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;wd&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# wd相当于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	net = nn.Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	net.add(nn.Dense(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	net.initialize(init.Normal(sigma=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 直接在构造Trainer实例时通过wd参数来指定权重衰减超参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 默认下，gluon会对权重和偏差同时衰减&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 仅对权重参数衰减，权重名称一般以weight结尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	trainer_w = gluon.Trainer(net.collect_params(&lt;span class=&#34;string&#34;&gt;&#39;.*weight&#39;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&#39;sgd&#39;&lt;/span&gt;, {&lt;span class=&#34;string&#34;&gt;&#39;learning_rate&#39;&lt;/span&gt;: lr, &lt;span class=&#34;string&#34;&gt;&#39;wd&#39;&lt;/span&gt;: wd})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 不对偏差参数衰减，偏差名称一般是以bias结尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	trainer_b = gluon.Trainer(net.collect_params(&lt;span class=&#34;string&#34;&gt;&#39;.*bias&#39;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&#39;sgd&#39;&lt;/span&gt;, {&lt;span class=&#34;string&#34;&gt;&#39;learning_rate&#39;&lt;/span&gt;: lr})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	train_ls, teat_ls = [], []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(num_epochs):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; X, y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; train_iter:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; autograd.record():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				l = loss(net(X), y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			l.backward()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 对两个Trainer实例分别调用step函数，从而分别更新权重和偏差&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			trainer_w.step(batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			trainer_b.step(batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		train_ls.append(loss(net(train_features), train_labels).mean().asscalar())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		test_ls.append(loss(net(test_features), test_labels).mean().asscalar())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	d2l.semilogy(&lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, num_epochs + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), train_ls, &lt;span class=&#34;string&#34;&gt;&#39;epoch&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;loss&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				 &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, num_epochs + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), test_ls, [&lt;span class=&#34;string&#34;&gt;&#39;train&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;test&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;L2 norm of w:&#39;&lt;/span&gt;, net[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].weight.data().norm().asscalar())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/07/shen-du-xue-xi-mo-xing-xuan-ze-guo-ni-he-he-qian-ni-he/</guid>
            <title>深度学习-模型选择+过拟合和欠拟合</title>
            <link>https://chencc8.github.io/2022/03/07/shen-du-xue-xi-mo-xing-xuan-ze-guo-ni-he-he-qian-ni-he/</link>
            <category>深度学习</category>
            <pubDate>Mon, 07 Mar 2022 03:58:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-模型选择-过拟合和欠拟合&#34;&gt;&lt;a href=&#34;#深度学习-模型选择-过拟合和欠拟合&#34; class=&#34;headerlink&#34; title=&#34;深度学习-模型选择+过拟合和欠拟合&#34;&gt;&lt;/a&gt;深度学习-模型选择+过拟合和欠拟合&lt;/h1&gt;&lt;h2 id=&#34;模型选择&#34;&gt;&lt;a href=&#34;#模型选择&#34; class=&#34;headerlink&#34; title=&#34;模型选择&#34;&gt;&lt;/a&gt;模型选择&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;训练误差和泛化误差&lt;br&gt;  训练误差：模型在训练数据上的误差&lt;br&gt;  泛化误差：模型在新数据上的误差&lt;br&gt;  &lt;strong&gt;更看重泛化误差&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证数据集和测试数据集&lt;br&gt;  验证数据集：一个用来评估模型好坏的数据集（&lt;strong&gt;不能和训练数据集混合！！！&lt;/strong&gt;）&lt;br&gt;  测试数据集：&lt;strong&gt;只用一次&lt;/strong&gt;的数据集&lt;br&gt;  &lt;strong&gt;验证数据集得到的精度不是真正代表在新数据集上的泛化能力&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;K-则交叉验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;没有足够多的数据&lt;/strong&gt;时使用（这是常态）&lt;/li&gt;
&lt;li&gt;算法：&lt;ol&gt;
&lt;li&gt;将训练数据分割成K块&lt;/li&gt;
&lt;li&gt;for i = 1,…,K&lt;br&gt; 使用第i块作为验证数据集，其余作为训练数据集&lt;/li&gt;
&lt;li&gt;报告K个验证集误差的&lt;strong&gt;平均&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;K常用5或10（很贵，看自己的能力）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;过拟合和欠拟合&#34;&gt;&lt;a href=&#34;#过拟合和欠拟合&#34; class=&#34;headerlink&#34; title=&#34;过拟合和欠拟合&#34;&gt;&lt;/a&gt;过拟合和欠拟合&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;模型\数据&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;简单&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;复杂&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;正常&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;欠拟合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;过拟合&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模型容量&lt;/strong&gt;&lt;br&gt;  &lt;strong&gt;即拟合各种函数的能力&lt;/strong&gt;&lt;br&gt;  训练误差理论上可以到达零，即神经网络理论上可以记住所有数据&lt;br&gt;  核心：模型应先足够大（过拟合），通过各种手段控制模型容量，使得泛化误差下降&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;估计模型容量&lt;/strong&gt;&lt;br&gt;  难以在不同的种类算法之间比较&lt;br&gt;  给定模型种类，有两个主要因素：&lt;strong&gt;参数个数&lt;/strong&gt;，&lt;strong&gt;参数值的选择范围&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VC维&lt;/strong&gt;（了解）&lt;br&gt;  统计学习理论的一个核心思想&lt;br&gt;  支持N维输入的感知机的VC维是N+1&lt;br&gt;  一些多层感知机的VC维是O(Nlog2N)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VC维的用处&lt;ol&gt;
&lt;li&gt;提供为什么一个模型好的理论依据&lt;br&gt; 它可以衡量训练误差和泛化误差之间的间隔&lt;/li&gt;
&lt;li&gt;深度学习中很少使用&lt;br&gt; 衡量不是很准确&lt;br&gt; 计算深度学习模型的VC维很困难&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据复杂度&lt;/strong&gt;&lt;br&gt;  重要因素：样本个数，每个样本的元素个数，时间空间结构，多样性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;QA&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Q：SVM和神经网络相比？&lt;br&gt;A：SVM通过kernel来匹配模型复杂度，SVM很难做到一百万个数据量。能调整的东西不多，可调性不强。&lt;br&gt; 神经网络本身是一种语言。不直观但可编程性很强的框架，可以做到很大数据集。&lt;/li&gt;
&lt;li&gt;Q：假设一个二分类问题，实际情况是1/9的比例，验证集两种类型的比例应该是？&lt;br&gt;A：验证数据集：两类1：1（数据不够多）&lt;/li&gt;
&lt;li&gt;Q：K-则交叉验证的目的是确定超参数吗？需要用这个超参数再训练一次吗？&lt;br&gt;A：3种情况：&lt;br&gt;（1）确定超参数后，在整个训练集上重新训练一遍。&lt;br&gt;（2）选定好的超参数（任一结果或最好结果），但代价是模型少看了一些训练集&lt;br&gt;（3）训练后测试时k个模型都预测一次，把K个预测结果做平均，能增加模型稳定性，但代价是k倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/06/shen-du-xue-xi-softmax-hui-gui/</guid>
            <title>深度学习-softmax回归</title>
            <link>https://chencc8.github.io/2022/03/06/shen-du-xue-xi-softmax-hui-gui/</link>
            <category>深度学习</category>
            <pubDate>Sun, 06 Mar 2022 19:28:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-softmax回归&#34;&gt;&lt;a href=&#34;#深度学习-softmax回归&#34; class=&#34;headerlink&#34; title=&#34;深度学习-softmax回归&#34;&gt;&lt;/a&gt;深度学习-softmax回归&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;br&gt;  softmax回归的输出单元为多个（离散值），为单层神经网络，也属于全连接层。&lt;/p&gt;
&lt;p&gt;  引入softmax运算使输出更适合离散值的预测和训练。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从回归到多类分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回归&lt;ul&gt;
&lt;li&gt;单连续值输出&lt;/li&gt;
&lt;li&gt;自然区间R&lt;/li&gt;
&lt;li&gt;跟真实值的区别作为损失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类&lt;ul&gt;
&lt;li&gt;通常多个输出&lt;/li&gt;
&lt;li&gt;输出i是预测为第i类的置信度&lt;/li&gt;
&lt;li&gt;不关心实际值，而是对正确类别的置信度很大&lt;/li&gt;
&lt;li&gt;需要更置信的识别正确类（大余量）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;softmax回归模型&#34;&gt;&lt;a href=&#34;#softmax回归模型&#34; class=&#34;headerlink&#34; title=&#34;softmax回归模型&#34;&gt;&lt;/a&gt;softmax回归模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;输入和权重做线性叠加，softmax回归的&lt;strong&gt;输出值个数等于标签里的类别数&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以直接使用输出值oi当作预测类别是i的置信度，并将值最大的输出所对应的类作为预测输出，即输出argmax oi。但输出层输出值的范围不确定且真实标签是离散值，这些离散值与不确定范围的输出值之间的范围难以衡量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;故引用softmax运算将输出值变换成值为正且和为1的概率分布&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;softmax运算不改变预测类别&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交叉熵损失函数 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;真实标签也可以用类别分布表达，对于样本i，构造向量&lt;strong&gt;y&lt;/strong&gt;i ∈R^q^， 使第&lt;strong&gt;y&lt;/strong&gt;i个元素为1，其余为0（one-hot独热编码），使训练目标设为使预测概率分布&lt;strong&gt;y_hat&lt;/strong&gt;(i)尽可能接近真实的标签概率分布&lt;strong&gt;y&lt;/strong&gt;i&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预测分类结果正确，并不需要预测概率完全等于标签概率。但平方损失过于严格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要一个更适合衡量两个概率分布差异的测量函数，交叉熵是一个常用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交叉熵只关心对正确类别的预测概率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最小化交叉熵损失函数等价于最大化训练数据集所有标签类别的联合预测概率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其梯度是真实概率和预测概率的区别&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;softmax回归简洁实现&#34;&gt;&lt;a href=&#34;#softmax回归简洁实现&#34; class=&#34;headerlink&#34; title=&#34;softmax回归简洁实现&#34;&gt;&lt;/a&gt;softmax回归简洁实现&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; d2lzh &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; gluon, init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet.gluon &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; loss &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gloss, nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读取数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;batch_size = &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.add(nn.Dense(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;# 单层神经网络，输出值个数为10类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.initialize(init.Normal(sigma=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = gloss.SoftmaxCrossEntropyLoss()  &lt;span class=&#34;comment&#34;&gt;# 交叉熵函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer = gluon.Trainer(net.collect_params(), &lt;span class=&#34;string&#34;&gt;&#39;sgd&#39;&lt;/span&gt;, {&lt;span class=&#34;string&#34;&gt;&#39;learning_rate&#39;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num_epochs = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# 迭代次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, trainer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;损失函数&#34;&gt;&lt;a href=&#34;#损失函数&#34; class=&#34;headerlink&#34; title=&#34;损失函数&#34;&gt;&lt;/a&gt;损失函数&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;L2 Loss（L2范数/平方损失）  梯度的绝对值在较远的地方下降较大&lt;/li&gt;
&lt;li&gt;L1 Loss  预测值和实际值距离较远时，梯度下降不变，稳定性，但靠近0时，会变得不稳定（不平滑性）&lt;/li&gt;
&lt;li&gt;Huber`s Robust Loss 结合上述两种损失函数的优点（稳定性+平滑性）&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/06/shen-du-xue-xi-duo-ceng-gan-zhi-ji/</guid>
            <title>深度学习-多层感知机</title>
            <link>https://chencc8.github.io/2022/03/06/shen-du-xue-xi-duo-ceng-gan-zhi-ji/</link>
            <category>深度学习</category>
            <pubDate>Sun, 06 Mar 2022 19:28:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-多层感知机&#34;&gt;&lt;a href=&#34;#深度学习-多层感知机&#34; class=&#34;headerlink&#34; title=&#34;深度学习-多层感知机&#34;&gt;&lt;/a&gt;深度学习-多层感知机&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;概述：多层神经网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感知机&#34;&gt;&lt;a href=&#34;#感知机&#34; class=&#34;headerlink&#34; title=&#34;感知机&#34;&gt;&lt;/a&gt;感知机&lt;/h2&gt;&lt;p&gt;给入输入&lt;strong&gt;x&lt;/strong&gt;，权重&lt;strong&gt;w&lt;/strong&gt;，和偏移b，感知机输出：&lt;/p&gt;
&lt;p&gt;o = σ(&amp;lt;**w**, **x**&amp;gt; + b)&lt;/p&gt;
&lt;p&gt;x&amp;gt;0时，σ(x) = 1&lt;/p&gt;
&lt;p&gt;x&amp;lt;=0时，σ(x) = 0 / -1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单一元素输出可以做成二分类问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;softmax有n各类则有n个输出，属于多分类问题，感知机只输出一个元素，属于二分类问题&lt;/p&gt;
&lt;p&gt;线性回归输出的是实数，而感知机输出的是离散的类&lt;/p&gt;
&lt;p&gt;单层感知机只对&lt;strong&gt;线性可分&lt;/strong&gt;的数据集有效&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;收敛定理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据在半径r内&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;余量ρ分类两类&lt;/p&gt;
&lt;p&gt;  y(&lt;strong&gt;x&lt;/strong&gt;T&lt;strong&gt;w&lt;/strong&gt; + b) &amp;gt;= ρ&lt;/p&gt;
&lt;p&gt;  即分类正确而且留有余量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于||&lt;strong&gt;w&lt;/strong&gt;||2 + b2 &amp;lt;= 1，感知机保证在(r2 + 1)/ρ2步后收敛&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XOR问题难以解决，不能拟合XOR函数，它只能产生线性分割面。所以引入了激活函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多层感知机&#34;&gt;&lt;a href=&#34;#多层感知机&#34; class=&#34;headerlink&#34; title=&#34;多层感知机&#34;&gt;&lt;/a&gt;多层感知机&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;隐藏层&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;位于输入层和输出层之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多层感知机中隐藏层和输出层都是全连接层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐藏层数和每层隐藏层大小是&lt;strong&gt;超参数&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;神经网络越深，每层隐藏单元个数逐层减小，不断压缩，最下面一层可以大一点，减小的隐藏层个数过大会导致数据损失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需加入激活函数，否则仍为单层神经网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;激活函数&lt;/strong&gt;（常用ReLU函数） &lt;/p&gt;
&lt;p&gt;  避免层数的塌陷&lt;/p&gt;
&lt;p&gt;  全连接层只是对数据做仿射变换，而多个仿射变换的叠加仍然是放射变换，解决问题的一个方法是引入非线性变换，成为激活函数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ReLU函数&lt;/p&gt;
&lt;p&gt; ReLU(x) = max(x, 0)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽管输入为0时不可导，但此处导数可以取0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sigmoid函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以将元素的值变换到0~1之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当输入接近0时，sigmoid函数接近线性变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当输入为0时，sigmoid函数的导数最大值为0.25，偏离0时，导数接近0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tanh函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以将元素的值变换到-1~1之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当输入接近0时，tanh函数接近线性变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tanh函数在坐标系原点上对称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当输入为0时，tanh函数的导数最大值为1，偏离0时，导数接近0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多层感知机：含有至少一个隐藏层的由全连接层组成的神经网络，且每个输出层的输出通过激活函数进行变换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多层感知机的层数和各隐藏层中隐藏单元个数都是超参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做多类分类的多层感知机可以使用softmax函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要步骤可以写成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义一个神经网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义一个Trainer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传入数据及标签，数据大小batch_shape&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前向传播计算loss&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反向传播得到梯度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新权重等参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多层感知机简洁实现&#34;&gt;&lt;a href=&#34;#多层感知机简洁实现&#34; class=&#34;headerlink&#34; title=&#34;多层感知机简洁实现&#34;&gt;&lt;/a&gt;多层感知机简洁实现&lt;/h2&gt;&lt;h3 id=&#34;mxnet版&#34;&gt;&lt;a href=&#34;#mxnet版&#34; class=&#34;headerlink&#34; title=&#34;mxnet版&#34;&gt;&lt;/a&gt;mxnet版&lt;/h3&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; d2lzh &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; gluon, init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet.gluon &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; loss &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gloss, nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.add(nn.Dense(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&#39;relu&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    nn.Dense(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    &lt;span class=&#34;comment&#34;&gt;# 指定隐藏单元个数为256，并使用ReLU激活函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    &lt;span class=&#34;comment&#34;&gt;# 输出个数为10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.initialize(init.Normal(sigma=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;batch_size = &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 计算交叉熵损失&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = gloss.SoftmaxCrossEntropyLoss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 优化算法，设定学习率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer = gluon.Trainer(net.collect_params(), &lt;span class=&#34;string&#34;&gt;&#39;sgd&#39;&lt;/span&gt;, {&lt;span class=&#34;string&#34;&gt;&#39;learning_rate&#39;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num_epochs = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, trainer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;PyTorch版&#34;&gt;&lt;a href=&#34;#PyTorch版&#34; class=&#34;headerlink&#34; title=&#34;PyTorch版&#34;&gt;&lt;/a&gt;PyTorch版&lt;/h3&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; d2l &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; d2l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential(nn.Flatten(), nn.Linear(&lt;span class=&#34;number&#34;&gt;784&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;), nn.ReLU(), nn.Linear(&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;init_weights&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;m&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(m) == nn.Linear:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.init.normal_(m.weight, std=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.apply(init_weights)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;batch_size, lr, num_epochs = &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = nn.CrossEntropyLoss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer = torch.optim.SGD(net.Parameters(), lr=lr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, trainer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;train_ch3函数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;train_ch3&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;net, train_iter, test_iter, loss, num_epochs, batch_size, params=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, lr=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, trainer=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;Train and evaluate a model with CPU.&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; epoch &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(num_epochs):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        train_l_sum, train_acc_sum, n = &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; X, y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; train_iter:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; autograd.record():  &lt;span class=&#34;comment&#34;&gt;# 记录梯度（正向传播记录loss）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                y_hat = net(X)  &lt;span class=&#34;comment&#34;&gt;# 预测值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                l = loss(y_hat, y).&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;() &lt;span class=&#34;comment&#34;&gt;# 计算batch_size小批量样本交叉熵损失之和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;comment&#34;&gt;# 这里不除以是因为最后直接除以总样本数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l.backward()  &lt;span class=&#34;comment&#34;&gt;# 求梯度（反向传播求梯度）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; trainer &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:  &lt;span class=&#34;comment&#34;&gt;# 从零实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        	sgd(params, lr, batch_size)  &lt;span class=&#34;comment&#34;&gt;# 优化算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:  &lt;span class=&#34;comment&#34;&gt;# 简洁实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        	trainer.step(batch_size)  &lt;span class=&#34;comment&#34;&gt;# 一次迭代，每次迭代更新一次参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        y = y.astype(&lt;span class=&#34;string&#34;&gt;&#39;float32&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        train_l_sum += l.asscalar()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        train_acc_sum += (y_hat.argmax(axis=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) == y).&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;().asscalar()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;comment&#34;&gt;# (y_hat.argmax(axis=1) == y)结果为由0和1组成的向量，相加为预测正确的数量。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;comment&#34;&gt;# asscalar()函数使其变为标量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	        n += y.size  &lt;span class=&#34;comment&#34;&gt;# 总样本数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      test_acc = evaluate_accuracy(test_iter, net)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;epoch %d, loss %.4f, train acc %.3f, test acc %.3f&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	            % (epoch + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, train_l_sum / n, train_acc_sum / n, test_acc))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 除以n即计算平均&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练器Trainer函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;注册优化器函数&lt;/li&gt;
&lt;li&gt;在with autograd.record():之后结合trainer.step(batch_size)更新权重。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/03/06/shen-du-xue-xi-xian-xing-hui-gui/</guid>
            <title>深度学习-线性回归</title>
            <link>https://chencc8.github.io/2022/03/06/shen-du-xue-xi-xian-xing-hui-gui/</link>
            <category>深度学习</category>
            <pubDate>Sun, 06 Mar 2022 19:28:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习-线性回归&#34;&gt;&lt;a href=&#34;#深度学习-线性回归&#34; class=&#34;headerlink&#34; title=&#34;深度学习-线性回归&#34;&gt;&lt;/a&gt;深度学习-线性回归&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;br&gt;  线性回归属于单层神经网络(一般有权重即为一层)，输出的是一个连续值，适用于回归问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字母含义&lt;br&gt;  x：特征（决定因素）&lt;br&gt;  &lt;strong&gt;w&lt;/strong&gt;：权重(这个例子中是标量)&lt;br&gt;  b：偏差&lt;br&gt;  y：标签（实际值）&lt;br&gt;  y_hat(y^)：预测值&lt;/p&gt;
&lt;h2 id=&#34;线性回归基本要素&#34;&gt;&lt;a href=&#34;#线性回归基本要素&#34; class=&#34;headerlink&#34; title=&#34;线性回归基本要素&#34;&gt;&lt;/a&gt;线性回归基本要素&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模型（房价预测）&lt;/strong&gt;&lt;br&gt;  y_hat = x1w1 + x2w2 + b&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模型训练&lt;/strong&gt;&lt;br&gt;  通过数据寻找特定的模型参数值，使模型在数据上的误差尽可能小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;训练模型&lt;/strong&gt;&lt;br&gt;                 假设采集样本数为n，索引为i的样本的特征为x&lt;del&gt;1&lt;/del&gt;^(i)^和x&lt;del&gt;2&lt;/del&gt;^(i)^,标签为y^(i)^，对于索引为i的房屋，线性回归模型的房屋价格预测表达式为：&lt;br&gt;                                                     y_hat^(i)^ = x&lt;del&gt;1&lt;/del&gt;^(i)^w&lt;del&gt;1&lt;/del&gt; + x&lt;del&gt;2&lt;/del&gt;^(i)^w&lt;del&gt;2&lt;/del&gt; + b&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;损失函数（一般使用平方函数）&lt;/strong&gt; &lt;span class=&#34;github-emoji&#34;&gt;&lt;span&gt;😳&lt;/span&gt;&lt;img src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8&#34; aria-hidden=&#34;true&#34; onerror=&#34;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&#34;&gt;&lt;/span&gt;&lt;br&gt;  通常选取一个非负数作为误差，数值越小误差越小。&lt;br&gt;  表达式：l^(i)^(w&lt;del&gt;1&lt;/del&gt;, w&lt;del&gt;2&lt;/del&gt;, b) =^1^/&lt;del&gt;2&lt;/del&gt;(y_hat^(i)^ - y^(i)^)^2^    （&lt;strong&gt;^1^/&lt;del&gt;2&lt;/del&gt;便于求导&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;  通常使用所有样本误差的平均来衡量模型预测的质量&lt;br&gt;  即 l(w&lt;del&gt;1&lt;/del&gt;, w&lt;del&gt;2&lt;/del&gt;, b) = ^1^/&lt;del&gt;n&lt;/del&gt;   ∑&lt;del&gt;i=1&lt;/del&gt;^n^  l^(i)^(w&lt;del&gt;1&lt;/del&gt;, w&lt;del&gt;2&lt;/del&gt;, b) =  ^1^/&lt;del&gt;n&lt;/del&gt;   ∑&lt;del&gt;i=1&lt;/del&gt;^n^   ^1^/&lt;del&gt;2&lt;/del&gt;( x&lt;del&gt;1&lt;/del&gt;^(i)^w&lt;del&gt;1&lt;/del&gt; + x&lt;del&gt;2&lt;/del&gt;^(i)^w&lt;del&gt;2&lt;/del&gt; + b - y^(i)^)^2^&lt;/p&gt;
&lt;p&gt;  理想模型参数记为w&lt;del&gt;1&lt;/del&gt;^&lt;em&gt;^, w&lt;del&gt;2&lt;/del&gt;^&lt;/em&gt;^, b^&lt;em&gt;^ ，即 w&lt;del&gt;1&lt;/del&gt;^&lt;/em&gt;^, w&lt;del&gt;2&lt;/del&gt;^&lt;em&gt;^, b^&lt;/em&gt;^ = argmin l(w&lt;del&gt;1&lt;/del&gt;, w&lt;del&gt;2&lt;/del&gt;, b)，使训练样本损失最小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优化算法&lt;/strong&gt;  &lt;span class=&#34;github-emoji&#34;&gt;&lt;span&gt;👿&lt;/span&gt;&lt;img src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8&#34; aria-hidden=&#34;true&#34; onerror=&#34;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&#34;&gt;&lt;/span&gt;&lt;br&gt;  解析解：可以直接用公式表达的解。&lt;br&gt;  数值解：只能通过优化算法有限次迭代模型参数来尽可能降低损失函数的值。&lt;br&gt;  &lt;strong&gt;大多数深度学习模型没有解析解。&lt;/strong&gt;&lt;br&gt;  超参数：人为设定的参数，不需要通过训练模型学习。&lt;br&gt;  学习率：正数 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小批量随机梯度下降&lt;/strong&gt;（sgd）  &lt;span class=&#34;github-emoji&#34;&gt;&lt;span&gt;😵&lt;/span&gt;&lt;img src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8&#34; aria-hidden=&#34;true&#34; onerror=&#34;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&#34;&gt;&lt;/span&gt;&lt;br&gt;  算法：选取一组模型参数初始值（如随机选取），对参数进行多次迭代，使每次迭代都可能降低损失函数的值。每次迭代中，随机均匀采样一个由固定数目训练数据样本所组成的小批量，求小批量中数据样本的平均损失有关模型参数的导数（梯度）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模型预测&lt;/strong&gt;（模型推断或模型测试）&lt;br&gt;  得到的不一定是最优解w&lt;del&gt;1&lt;/del&gt;^*^, w&lt;del&gt;2&lt;/del&gt;^&lt;em&gt;^, b^&lt;/em&gt;^，而是对最优解的一个&lt;strong&gt;近似&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;神经网络图&lt;/strong&gt;&lt;br&gt;  使用神经网络图直观地表现模型结构，隐去了模型参数权重和偏差。&lt;br&gt;  输入个数也叫特征数或特征向量维度。&lt;br&gt;  输入层不涉及计算。&lt;br&gt;  输出层中的神经元与输入层中各个输入完全连接，这里的输出层又叫全连接层或稠密层。&lt;/p&gt;
&lt;h2 id=&#34;线性回归从零实现&#34;&gt;&lt;a href=&#34;#线性回归从零实现&#34; class=&#34;headerlink&#34; title=&#34;线性回归从零实现&#34;&gt;&lt;/a&gt;线性回归从零实现&lt;/h2&gt;&lt;p&gt;  太懒了不想打了…   &lt;span class=&#34;github-emoji&#34;&gt;&lt;span&gt;😶&lt;/span&gt;&lt;img src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8&#34; aria-hidden=&#34;true&#34; onerror=&#34;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;线性回归简洁实现&#34;&gt;&lt;a href=&#34;#线性回归简洁实现&#34; class=&#34;headerlink&#34; title=&#34;线性回归简洁实现&#34;&gt;&lt;/a&gt;线性回归简洁实现&lt;/h2&gt;  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; autograd, nd, gluon&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; mxnet.gluon &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; data &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gdata, loss &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; gloss, nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 生成数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num_inputs, num_examples = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;true_w = [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;3.4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;true_b = &lt;span class=&#34;number&#34;&gt;4.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;features = nd.random.normal(scale=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, shape=(num_examples, num_inputs))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;labels = true_W[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] * features[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + true_w[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] * features[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + true_b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 为使模型复杂加入噪音&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;labels += nd.random.normal(scale=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, shape=labels.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 读取数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;batch_size = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;# 批量大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 将训练数据的特征和标签组合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dataset = gdata.ArrayDataset(features, labels)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data_iter = gdata.DataLoader(dataset, batch_size, shuffle=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# shuffle为True代表打乱顺序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net = nn.Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# nn是neural networks（神经网络）的缩写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# net是Sequential（序列）实例。Sequential实例：看作一个串联各个层的容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.add(nn.Dense(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 一个Dense表示一层，参数值为输出个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 在容器中依次加入层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Gluon中无需指定每一层输入形状&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;net.initialize(init.Normal(sigma=&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# init模块提供模型初始化参数的各种方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = gloss.L2Loss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 平方损失即L2范数损失&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer = gluon.Trainer(net.collect_params(), &lt;span class=&#34;string&#34;&gt;&#39;sgd&#39;&lt;/span&gt;, {&lt;span class=&#34;string&#34;&gt;&#39;learing_rate&#39;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0.03&lt;/span&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建Trainer实例，参数通过collect_params函数获取参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num_epochs = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# 迭代次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; epoch &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, nums_epochs + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; X, y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data_iter:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; autogard.record():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			l = loss(net(X), y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		l.backward()  &lt;span class=&#34;comment&#34;&gt;# 计算梯度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		trainer.step(batch_size)  &lt;span class=&#34;comment&#34;&gt;# 表示一次迭代，每次迭代更新参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	l = loss(net(features), labels)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;epoch %d, loss: %f&#39;&lt;/span&gt; %(epoch, l.mean().asnumpy()))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/02/20/nim-you-xi/</guid>
            <title>Nim游戏</title>
            <link>https://chencc8.github.io/2022/02/20/nim-you-xi/</link>
            <category>leetcode</category>
            <category>python</category>
            <pubDate>Sun, 20 Feb 2022 19:29:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Nim游戏&#34;&gt;&lt;a href=&#34;#Nim游戏&#34; class=&#34;headerlink&#34; title=&#34;Nim游戏&#34;&gt;&lt;/a&gt;Nim游戏&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目&lt;br&gt;  你和你的朋友，两个人一起玩&amp;nbsp;Nim 游戏：&lt;br&gt;  - 桌子上有一堆石头。&lt;br&gt;  - 你们轮流进行自己的回合，&amp;nbsp;&lt;strong&gt;你作为先手&lt;/strong&gt;&amp;nbsp;。&lt;br&gt;  - 每一回合，轮到的人拿掉&amp;nbsp;&lt;strong&gt;1 - 3&lt;/strong&gt; 块石头。&lt;br&gt;  - &lt;strong&gt;拿掉最后一块石头的人&lt;/strong&gt;就是获胜者。&lt;br&gt;  假设你们&lt;strong&gt;每一步都是最优解&lt;/strong&gt;。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例1：&lt;br&gt;  输入：n = 4&lt;br&gt;  输出：false&lt;br&gt;  解释：以下是可能的结果:&lt;ol&gt;
&lt;li&gt;移除1颗石头。你的朋友移走了3块石头，包括最后一块。你的朋友赢了。&lt;/li&gt;
&lt;li&gt;移除2个石子。你的朋友移走2块石头，包括最后一块。你的朋友赢了。&lt;/li&gt;
&lt;li&gt;你移走3颗石子。你的朋友移走了最后一块石头。你的朋友赢了。&lt;/li&gt;
&lt;li&gt;在所有结果中，你的朋友是赢家。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;示例2：&lt;br&gt;  输入：n = 1&lt;br&gt;  输出：true&lt;/li&gt;
&lt;li&gt;示例3：&lt;br&gt;  输入：n = 2&lt;br&gt;  输出：true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提示&lt;br&gt;  1 &amp;lt;= n &amp;lt;= 2e31 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解思路&lt;br&gt;  其实就是一个推理题啦，我是一个一个推出来的&lt;/p&gt;
&lt;p&gt;  根据题目 只要有一种情况可以推出我赢就算赢&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;numbers&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;winner&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿1块，我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿2块，我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿3块，我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿1~3块，朋友拿1~3块，朋友赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿1块，朋友最多拿3块，我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿1块，朋友最多拿3块，我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我拿1块，朋友最多拿3块，我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;朋友赢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9块&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;我赢&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;  只要石头个数为4的倍数，不管怎么拿，最后一轮朋友可以取的石头个数不大于3个，朋友赢&lt;/p&gt;
&lt;p&gt;  如果不是4的倍数，最后一轮我可以取的石头个数不大于3个，我赢&lt;/p&gt;
&lt;p&gt;  所以石头个数只要不是4的倍数，就返回True，否则返回False&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SOlution&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;canWinNim&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, n&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       	:type n: int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       	:rtype: bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       	&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; n % &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  时间复杂度：O(n)&lt;br&gt;  空间复杂度：O(n)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/02/20/an-xu-da-yin/</guid>
            <title>按序打印</title>
            <link>https://chencc8.github.io/2022/02/20/an-xu-da-yin/</link>
            <category>leetcode</category>
            <category>python</category>
            <pubDate>Sun, 20 Feb 2022 19:29:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;按序打印&#34;&gt;&lt;a href=&#34;#按序打印&#34; class=&#34;headerlink&#34; title=&#34;按序打印&#34;&gt;&lt;/a&gt;按序打印&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目&lt;br&gt;  给你一个类：&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public void first() { &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;first&#34;&lt;/span&gt;); }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public void second() { &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;second&#34;&lt;/span&gt;); }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public void third() { &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;third&#34;&lt;/span&gt;); }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  三个不同的线程 A、B、C 将会共用一个Foo实例。&lt;/p&gt;
&lt;p&gt;  线程 A 将会调用 first() 方法&lt;/p&gt;
&lt;p&gt;  线程 B 将会调用&amp;nbsp;second() 方法&lt;/p&gt;
&lt;p&gt;  线程 C 将会调用 third() 方法&lt;/p&gt;
&lt;p&gt;  请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third() 方法在 second() 方法之后被执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;示例1：&lt;br&gt;  &lt;strong&gt;输入&lt;/strong&gt;：nums = [1,2,3]&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;输出&lt;/strong&gt;：”firstsecondthird”&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;解释&lt;/strong&gt;：有三个线程会被异步启动。输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。正确的输出是 “firstsecondthird”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例2：&lt;br&gt;  &lt;strong&gt;输入&lt;/strong&gt;：nums = [1,3,2]&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;输出&lt;/strong&gt;：”firstsecondthird”&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;解释&lt;/strong&gt;：输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。正确的输出是 “firstsecondthird”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提示&lt;br&gt;  尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。&lt;/p&gt;
&lt;p&gt;  你看到的输入格式主要是为了确保测试的全面性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解思路：&lt;br&gt;  多线程，利用threading.Lock(互斥锁)来解决&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; threading &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Lock&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			self.lock = Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               self.locks = Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               self.lock.acquire()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               self.locks.acquire()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;first&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, printFirst&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			:type printFirst: method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			:rtype: void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# printFirst() outputs &#34;first&#34;. Do not change or remove this line.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			printFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			self.lock.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;second&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, printSecond&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			:type printSecond: method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			:rtype: void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 需要确定上一个是否已完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.lock:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# printSecond() outputs &#34;second&#34;. Do not change or remove this line.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				printSecond()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				self.locks.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;third&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, printThird&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			:type printThird: method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			:rtype: void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;			&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 需要确定上一个是否已完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.locks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# printThird() outputs &#34;third&#34;. Do not change or remove this line.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				printThird()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/02/20/xuan-zhuan-tu-xiang/</guid>
            <title>旋转图像</title>
            <link>https://chencc8.github.io/2022/02/20/xuan-zhuan-tu-xiang/</link>
            <category>leetcode</category>
            <category>python</category>
            <pubDate>Sun, 20 Feb 2022 19:29:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;旋转图像&#34;&gt;&lt;a href=&#34;#旋转图像&#34; class=&#34;headerlink&#34; title=&#34;旋转图像&#34;&gt;&lt;/a&gt;旋转图像&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目&lt;br&gt;  给定一个 n&amp;nbsp;×&amp;nbsp;n 的二维矩阵&amp;nbsp;matrix 表示一个图像。请你将图像顺时针旋转 90 度。&lt;br&gt;  你必须在&lt;strong&gt;原地&lt;/strong&gt;旋转图像，这意味着你需要直接修改输入的二维矩阵。&lt;strong&gt;请不要&lt;/strong&gt;使用另一个矩阵来旋转图像。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例1：&lt;br&gt;  输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]&lt;br&gt;  输出：[[7,4,1],[8,5,2],[9,6,3]]&lt;/li&gt;
&lt;li&gt;示例2：&lt;br&gt;  输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]&lt;br&gt;  输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提示&lt;br&gt;  n == matrix.length == matrix[i].length&lt;br&gt;  1 &amp;lt;= n &amp;lt;= 20&lt;br&gt;  -1000 &amp;lt;= matrix[i] [j] &amp;lt;= 1000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解思路&lt;br&gt;  观察示例，可知输出矩阵可由输入矩阵先转置（即沿对角线翻转）后左右进行列互换（或沿中线上下进行行互换后转置）。&lt;br&gt;  &lt;strong&gt;注意：前后不可以调换顺序，否则结果不正确&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;rotate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, matrix&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       :type matrix: List[List[int]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       :rtype: None Do not return anything, modify matrix in-place instead.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       &#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       n = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(matrix)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 先进行转置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 防止重复对i，j限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &amp;lt; j:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 进行列互换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       p = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	q = n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               	matrix[j][p], matrix[j][q] = matrix[j][q], matrix[j][p]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	p += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	q -= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;# 防止重复对p， q限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;  p&amp;gt;q:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; matrix&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  时间复杂度：O(n²)&lt;br&gt;  空间复杂度：O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;官方题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;rotate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, matrix&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		n = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(matrix)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# 水平翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n // &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			matrix[i][j], matrix[n - i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j] = matrix[n - i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j], matrix[i][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# 主对角线翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(i):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  时间复杂度：O(n²)&lt;br&gt;  空间复杂度：O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/02/20/tiao-yue-you-xi/</guid>
            <title>跳跃游戏</title>
            <link>https://chencc8.github.io/2022/02/20/tiao-yue-you-xi/</link>
            <category>leetcode</category>
            <category>python</category>
            <pubDate>Sun, 20 Feb 2022 19:29:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;跳跃游戏&#34;&gt;&lt;a href=&#34;#跳跃游戏&#34; class=&#34;headerlink&#34; title=&#34;跳跃游戏&#34;&gt;&lt;/a&gt;跳跃游戏&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;  给定一个非负整数数组 nums ，你最初位于数组的&lt;strong&gt;第一个&lt;/strong&gt;下标 。&lt;/p&gt;
&lt;p&gt;  数组中的每个元素代表你在该位置可以跳跃的最大长度。&lt;/p&gt;
&lt;p&gt;  判断你是否能够到达最后一个下标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例1：&lt;br&gt;  &lt;strong&gt;输入&lt;/strong&gt;：nums = [2,3,1,1,4]&lt;br&gt;  &lt;strong&gt;输出&lt;/strong&gt;：true&lt;br&gt;  &lt;strong&gt;解释&lt;/strong&gt;：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。&lt;/li&gt;
&lt;li&gt;示例2：&lt;br&gt;  &lt;strong&gt;输入&lt;/strong&gt;：nums = [3,2,1,0,4]&lt;br&gt;  &lt;strong&gt;输出&lt;/strong&gt;：false&lt;br&gt;  &lt;strong&gt;解释&lt;/strong&gt;：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提示&lt;br&gt;  1 &amp;lt;= nums.length &amp;lt;= 3e4&lt;br&gt;  0 &amp;lt;= nums[i] &amp;lt;= 1e5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解思路：&lt;br&gt;  分为两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当数组长度为1时，不管是多少，都能到达最后一位&lt;/li&gt;
&lt;li&gt;当数组长度&amp;gt;=1时，遍历数组，记录可以跳转的最大位置，若相加后索引大于等于最后一位索引，则一定能到达最后一位，返回True，若小于最后一位索引，则记为最大长度，若后续超过最大长度，则更新最大长度。若遍历后最大长度不能到达，返回False。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;canJump&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, nums&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       	:type nums: List[int]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       	:rtype: bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       	&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	r, i, n = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; i &amp;lt;= r:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	r = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(r, i + nums[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; r &amp;gt;= n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	i += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  时间复杂度：O(n)&lt;br&gt;  空间复杂度：O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;官方题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;canJump&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, nums: &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;]&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	n, rightmost = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(nums), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &amp;lt;= rightmost:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               	rightmost = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(rightmost, i + nums[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; rightmost &amp;gt;= n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  时间复杂度：O(n)&lt;br&gt;  空间复杂度：O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chencc8.github.io/2022/02/20/sheng-shui-zui-duo-de-rong-qi/</guid>
            <title>盛水最多的容器</title>
            <link>https://chencc8.github.io/2022/02/20/sheng-shui-zui-duo-de-rong-qi/</link>
            <category>leetcode</category>
            <category>python</category>
            <pubDate>Sun, 20 Feb 2022 19:29:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;盛水最多的容器&#34;&gt;&lt;a href=&#34;#盛水最多的容器&#34; class=&#34;headerlink&#34; title=&#34;盛水最多的容器&#34;&gt;&lt;/a&gt;盛水最多的容器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目&lt;br&gt;  给定一个长度为 n 的整数数组&amp;nbsp;height&amp;nbsp;。有&amp;nbsp;n&amp;nbsp;条垂线，第 i 条线的两个端点是&amp;nbsp;(i, 0)&amp;nbsp;和&amp;nbsp;(i, height[i])&amp;nbsp;。&lt;/p&gt;
&lt;p&gt;  找出其中的两条线，使得它们与&amp;nbsp;x&amp;nbsp;轴共同构成的容器可以容纳最多的水。&lt;/p&gt;
&lt;p&gt;  返回容器可以储存的最大水量。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;说明&lt;/strong&gt;：你不能倾斜容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例1：&lt;br&gt;  &lt;strong&gt;输入&lt;/strong&gt;：[1,8,6,2,5,4,8,3,7]&lt;br&gt;  &lt;strong&gt;输出&lt;/strong&gt;：49&lt;br&gt;  &lt;strong&gt;解释&lt;/strong&gt;：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&amp;nbsp;49。&lt;/li&gt;
&lt;li&gt;示例2：&lt;br&gt;  &lt;strong&gt;输入&lt;/strong&gt;：height = [1,1]&lt;br&gt;  &lt;strong&gt;输出&lt;/strong&gt;：1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提示&lt;br&gt;  n == height.length&lt;br&gt;  2 &amp;lt;= n &amp;lt;= 1e5&lt;br&gt;  0 &amp;lt;= height[i] &amp;lt;= 1e4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解思路：&lt;br&gt;  刚开始想着都遍历一遍然后取最大值，用两个for循环实现&lt;/p&gt;
&lt;p&gt;  后来发现会超时…&lt;/p&gt;
&lt;p&gt;  以下是正确思路：&lt;/p&gt;
&lt;p&gt;  求可以储存的最大水量即求x的差值*y的最大值&lt;/p&gt;
&lt;p&gt;  x的差值即1到数组长度，随着x的变化求面积&lt;/p&gt;
&lt;p&gt;  y的长度即为数组下标为x1，x2的数字中最小的一个&lt;/p&gt;
&lt;p&gt;  可以使用双指针计算&lt;/p&gt;
&lt;p&gt;  如：&lt;br&gt;  y: [1,8,6,2,5,4,8,3,7]&lt;br&gt;  x: [1,2,3,4,5,6,7,8,9]&lt;br&gt;    ^                             ^&lt;br&gt;  x差值为8，y中1和7中选择较小的值，此时盛水面积为8，并且指针向右移动一位&lt;br&gt;  y: [1,8,6,2,5,4,8,3,7]&lt;br&gt;  x: [1,2,3,4,5,6,7,8,9]&lt;br&gt;        ^                         ^&lt;br&gt;  x差值为7，y取8，此时盛水面积为56， 右指针向左移动一位&lt;/p&gt;
&lt;p&gt;  并与前一个值做比较，保留最大的值，丢弃较小值&lt;/p&gt;
&lt;p&gt;  以此类推&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题解&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;maxArea&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, height&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       :type height: List[int]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       :rtype: int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;       &#34;&#34;&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       l, r = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(height) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; l &amp;lt; r:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           i = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(height[l], height[r]) * (r - l)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           x = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(x, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; height[l] &amp;lt;= height[r]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               l += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               r -= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  时间复杂度：O(n)&lt;br&gt;  空间复杂度：O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
