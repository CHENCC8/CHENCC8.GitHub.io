<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>matlab结构化程式与自定义函数</title>
      <link href="/2022/03/20/matlab-jie-gou-hua-cheng-shi-yu-zi-ding-yi-han-shu/"/>
      <url>/2022/03/20/matlab-jie-gou-hua-cheng-shi-yu-zi-ding-yi-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="matlab结构化程式与自定义函数"><a href="#matlab结构化程式与自定义函数" class="headerlink" title="matlab结构化程式与自定义函数"></a>matlab结构化程式与自定义函数</h1><h2 id="MATLAB-Script-脚本"><a href="#MATLAB-Script-脚本" class="headerlink" title="MATLAB Script(脚本)"></a>MATLAB Script(脚本)</h2><p>A file containing a series of MATLAB commands.<br>Pretty much like a C/C++ program.<br>Scripts need to be saved to a &lt;file&gt;.m file before they can be run.</p><p>tips:1 . matlab中注释符号为%，两个百分号%%分为section(用于debug)<br>   2 . Smart Indent （智能缩进）功能，用于自动对齐<br>   3 . 尽量使用Script Editor（编辑器）</p><h2 id="Script-Flow"><a href="#Script-Flow" class="headerlink" title="Script Flow"></a>Script Flow</h2><p>Typically scripts run from the first line to the last.<br><strong>Structured programming</strong> techniques(subroutine, loop, condition, etc) are applied to make the program looks neat.</p><ul><li>Relational (Logical) Operators<br>  &lt; , &lt;= , &gt; , &gt;= , == , ~=(不等于) , &amp;&amp;, ||</li></ul><h2 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h2><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">if,elseif,else</td><td align="center">break</td></tr><tr><td align="center">for</td><td align="center">continue</td></tr><tr><td align="center">switch,case,otherwise</td><td align="center">end</td></tr><tr><td align="center">try,catch</td><td align="center">pause</td></tr><tr><td align="center">while</td><td align="center">return</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p>tip:<br>   1 . rem(a, 2)是求余数 -&gt; remainder<br>   2 . prod(1:n) -&gt; n的阶乘<br>   如果A是向量，prod(A)返回A向量的乘积。<br>   如果A是矩阵，prod(A)将A看作列向量，返回每一列元素的乘积并组成一个行向量B。<br>   如果A是多维数组，prod(A)沿着第一个非单例作为向量，返回一个行向量数组。<br>   B = prod(A,dim)  沿着指定的dim标量的维计算A矩阵的乘积。</p><h2 id="Pre-allocating-Space-to-Variables"><a href="#Pre-allocating-Space-to-Variables" class="headerlink" title="Pre-allocating Space to Variables"></a>Pre-allocating Space to Variables</h2><p>tic - toc : 用来计算时间</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">tic</span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:<span class="number">2000</span></span><br><span class="line">    <span class="keyword">for</span> jj = <span class="number">1</span>:<span class="number">2000</span></span><br><span class="line">        A(ii, jj) = ii + jj;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">tic</span><br><span class="line">A = <span class="built_in">zeros</span>(<span class="number">2000</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:<span class="built_in">size</span>(A, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> jj = <span class="number">1</span>:<span class="built_in">size</span>(A, <span class="number">2</span>)</span><br><span class="line">        A(ii, jj) = ii + jj;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc</span><br></pre></td></tr></tbody></table></figure><p>第二节明显比第一节多用时间短</p><h2 id="Tips-for-Script-Writing"><a href="#Tips-for-Script-Writing" class="headerlink" title="Tips for Script Writing"></a>Tips for Script Writing</h2><p>Use ellipsis(…) to make scripts more readable(matlab中书写向量或矩阵不能直接换行)<br>e.g.  A = [1 2 3 4 5 6;7 …<br>   8 9 10 11 12]</p><p>Press Ctrl + C to terminate the script before conclusion</p><h2 id="Scripts-vs-Functions"><a href="#Scripts-vs-Functions" class="headerlink" title="Scripts vs. Functions"></a>Scripts vs. Functions</h2><p>Scripts and functions are both .m file that contain MATLAB commands<br>Functions are written when we need to perform routines</p><ul><li>Functions<br>  keyword: function<br>  <strong>function output = function name(input)</strong><br>  文件保存时要以function name为文件名保存</li></ul><ul><li>e.g.1</li></ul><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span> = <span class="title">freebody</span><span class="params">(x0, v0, t)</span></span></span><br><span class="line"><span class="comment">% calculation of free falling</span></span><br><span class="line"><span class="comment">% x0: initial displacement in m</span></span><br><span class="line"><span class="comment">% v0: initial velocity in m/sec</span></span><br><span class="line"><span class="comment">% t: the elapsed time in sec</span></span><br><span class="line"><span class="comment">% x: the depth of falling in m</span></span><br><span class="line">x = x0 + v0 .* t + <span class="number">1</span>/<span class="number">2</span>*<span class="number">9.8</span>*t.*t;</span><br><span class="line"><span class="comment">% .*是因为输入值可以为向量</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">% 以下为调用</span></span><br><span class="line">freebody(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">% 如果不用.*结果会出错，不能正确对应输入值</span></span><br><span class="line">freebody([<span class="number">0</span> <span class="number">1</span>], [<span class="number">0</span> <span class="number">1</span>], [<span class="number">10</span> <span class="number">20</span>])</span><br></pre></td></tr></tbody></table></figure><ul><li>e.g.2<figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[a F]</span> = <span class="title">acc</span><span class="params">(v2, v1, t2, t1, m)</span></span></span><br><span class="line">a = (v2 - v1)./(t2 - t1);</span><br><span class="line">F = m.*a;</span><br><span class="line"></span><br><span class="line">[Acc Force] = acc(<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="Function-Default-Variables"><a href="#Function-Default-Variables" class="headerlink" title="Function Default Variables"></a>Function Default Variables</h2><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">inputname</td><td align="center">Variable name of function input</td></tr><tr><td align="center">mfilename</td><td align="center">File name of currently running function</td></tr><tr><td align="center">nargin</td><td align="center">Number of function input arguments</td></tr><tr><td align="center">nargout</td><td align="center">Number of function output arguments</td></tr><tr><td align="center">varargin</td><td align="center">Variable length input argument list</td></tr><tr><td align="center">varargout</td><td align="center">Variable length output argument list</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p>e.g.</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[volumn]</span> = <span class="title">pillar</span><span class="params">(Do, Di, height)</span></span></span><br><span class="line"><span class="keyword">if</span> nargin == <span class="number">2</span>,</span><br><span class="line">height = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">volume = <span class="built_in">abs</span>(Do.^<span class="number">2</span> - Di.^<span class="number">2</span>).*height*<span class="built_in">pi</span>/<span class="number">4</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="Function-Handles"><a href="#Function-Handles" class="headerlink" title="Function Handles"></a>Function Handles</h2><p>A way to create anonymous(匿名函数) functions, i.e., one line expression functions that do not have to be defined in .m files.</p><p>e.g.</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = @(x) <span class="built_in">exp</span>(<span class="number">-2</span> * x);</span><br><span class="line">x = <span class="number">0</span>: <span class="number">0.1</span>: <span class="number">2</span>;</span><br><span class="line"><span class="built_in">plot</span>(x, f(x));</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab基本操作+矩阵操作</title>
      <link href="/2022/03/17/matlab-ji-ben-cao-zuo-ju-zhen-cao-zuo/"/>
      <url>/2022/03/17/matlab-ji-ben-cao-zuo-ju-zhen-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="matlab基本操作"><a href="#matlab基本操作" class="headerlink" title="matlab基本操作"></a>matlab基本操作</h2><ul><li><p>Special Variables and Constants</p><ul><li>ans</li><li>i, j: complex number(复数)</li><li>Inf: ∞</li><li>eps: 2.2204e-016(指一个很小的数)</li><li>NaN: not a number</li><li>pi: Π</li><li>变量名不能是关键词</li></ul></li><li><p>To list keywords:<br>   iskeyword</p></li><li><p>e.g.</p><p>  x = 1/0    -&gt; Inf<br>  x = log(0)        -&gt; -Inf<br>  x = inf/inf        -&gt; NaN</p></li><li><p>MATLAB Calling Priority</p><ul><li>Varieble &gt; Built-in function &gt; Subunction &gt; Private function(MEX-file &gt; P-file &gt; M-file)</li><li>不要用 built-in function name 或者 keyword 当作 variable name</li></ul></li><li><p>Numeric Display  “Format”<br>  short    -&gt; 小数点后4位<br>  long    -&gt; 双精度小数点后15位，单精度小数点后7位<br>  shortE    -&gt; 科学表示法，小数点后4位<br>  longE    -&gt; 科学表示法，双精度小数点后15位，单精度小数点后7位<br>  bank    -&gt; 如美金，保留至小数点后两位<br>  hex        -&gt; 转为16进制<br>  rat        -&gt; 转成有理数（即分数)</p></li><li><p>Command Line Terminal<br>  ; at the end of a command suppresses output to the terminal<br>  （加分号后不显示运算结果）<br>  方向键↑ display previous commands</p></li><li><p>Some Functions</p><ul><li>clc  -&gt; clear command window display</li><li>clear/clear all -&gt; remove all variables in the workspace</li><li>close all -&gt; to close all figures</li><li>who -&gt; variables in the workspace</li><li>whos -&gt; variable information of the workspace</li></ul></li><li><p>变量命名规则</p><ol><li>变量名区分大小写</li><li>变量名长度不超过63位</li><li>注释：<strong>单％是注释，双％％是分节</strong>。双%%后面空格一下写的东西也视作注释</li><li>变量名以<strong>字母</strong>开头，可以由<strong>字母，数字和下划线</strong>组成，但不能使用标点</li></ol></li></ul><h2 id="matlab矩阵操作"><a href="#matlab矩阵操作" class="headerlink" title="matlab矩阵操作"></a>matlab矩阵操作</h2><ul><li><p>Array(Vector and Matrix)<br>  Row vector:<br>  a = [1 2 3 4]<br>  Column Vector:<br>  b = [1; 2; 3; 4]</p></li><li><p>Array Indexing<br>  <strong>从1开始，不是从0开始</strong><br>  Select a certain subset of elements inside a matrix<br>  e.g.   A(8)<br>  A([1 3 5])<br>  A([1 3; 1 3])<br>  A(3,2)<br>  A([1 3], [1 3])</p></li><li><p>Replacing Entries<br>  The expression  A() = []     delete rows or columns of A<br>  A(3, : ) -&gt; 第三行全部<br>  A(3, :) = [] -&gt; 删除第三行全部</p></li><li><p>Colon(分号) Operator<br>  e.g.  B = 1 : 5<br> B = 1 : 2 : 5<br> str = ‘a’ : 2 : ‘z’</p></li><li><p>Array Concatenation<br>  F = [A B]  -&gt; 横向排列<br>  F = [A ; B]  -&gt; 竖向排列</p></li><li><p>Array Manipulation(类似线代)<br>  A * B -&gt; 表示矩阵乘法<br>  A .* B -&gt; 表示哈达玛积（即对应项相乘）<br>  G = A / B -&gt; 相当于A乘B的逆（inv()）<br>  H = A./ B -&gt; 对应项相除<br>  C = A` -&gt; 矩阵的转置</p></li><li><p>Some Special Matrix<br>  linspace(x1, x2, N) : linearly spaced vectors</p><p>  用于产生x1,x2之间的N点行矢量。其中x1、x2、N分别为起始值、中止值、元素个数。若缺省N，默认点数为100。在matlab的命令窗口下输入help linspace或者doc linspace可以获得该函数的帮助信息。</p><p>eye(n) : n x n identity matrix（n x n 的单位矩阵）<br>zeros(n1, n2) : n1 x n2 zero matrix<br>ones(n1, n2) : n1 x n2 matrix with every entry as 1<br>diag() : diagonal matrix （对角矩阵）<br>rand() : uniformly distributed random numbers<br>  repmat(B, 3, 1) : repmat()重复，3表示行重复了三次，1表示列重复了1次，类似于分块矩阵</p></li><li><p>Some Matrix Related Functions</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">max(A) -&gt; 每一列最大的数</td><td align="center">sort(A)</td></tr><tr><td align="center">max(max(A)) -&gt; 矩阵中最大的数</td><td align="center">sortrows(A)</td></tr><tr><td align="center">min(A)</td><td align="center">size(A)</td></tr><tr><td align="center">sum(A)</td><td align="center">length(A) -&gt; 矩阵A行数和列数的较大值</td></tr><tr><td align="center">mean(A)</td><td align="center">find(A)</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li></ul><p>基本上是按列（column）计算</p>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积和卷积神经网络</title>
      <link href="/2022/03/14/juan-ji-he-juan-ji-shen-jing-wang-luo/"/>
      <url>/2022/03/14/juan-ji-he-juan-ji-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="卷积和卷积神经网络"><a href="#卷积和卷积神经网络" class="headerlink" title="卷积和卷积神经网络"></a>卷积和卷积神经网络</h1><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><ul><li><p>概念</p><p>一个系统，输入不稳定，输出稳定，用卷积求系统存量</p><p>图像卷积操作：周围像素点对当前像素点如何产生影响</p><p>一个过滤器的卷积核：一个像素点如何试探周围像素点，如何筛选图像特征</p><p><strong>但深度学习中的卷积实际上是指互相关</strong></p></li></ul><h2 id="卷积神经网络概述"><a href="#卷积神经网络概述" class="headerlink" title="卷积神经网络概述"></a>卷积神经网络概述</h2><ul><li><p>卷积神经网络包括全连接层（fully connected layers），卷积层（Convolution layer），池化层（Pooling layer）</p></li><li><p>将图像拆分成对应特征，称为卷积核，扫描查看目标图有无对应卷积核来确认是否为目标物体</p></li><li><p>用卷积核扫描目标图得出一个二维矩阵（即特征图）</p></li><li><p>处理边缘时的操作叫<strong>填充</strong>（Padding），如果对图像采用最大池化，或者要保持图像大小不变，则需要在边缘补零来提取边缘特征</p></li><li><p>对于一个有大量细节，或者说相当数量分层级的细节来说，算法复杂度过高，所以有池化，即<strong>缩小特征图</strong>（Feature Map），池化要求<strong>保留原特征图的特征</strong></p><p>最常用的两种池化：</p><ul><li><p>最大池化：选择被扫描区域内的最大值</p></li><li><p>平均池化：取被扫描区域内的平均值</p></li></ul></li><li><p>卷积计算中一个基本流程：卷积，ReLU（修正线性单元），池化（下采样）</p></li><li><p>最后把特征图展开得到特征数组，得到概率数，用大数据修正卷积核和全连接，然后用反向传播不断训练得到近似的权重</p></li><li><p>开始卷积核和权重是随机的，通过大量的数据和反馈来训练得到参数</p></li></ul><h2 id="从全连接到卷积层"><a href="#从全连接到卷积层" class="headerlink" title="从全连接到卷积层"></a>从全连接到卷积层</h2><ul><li><p>对于大图片来说使用单隐藏层MLP导致所需内存过大，不适用于对图片的分类</p></li><li><p>卷积核遵循两个原则：<strong>平移不变性</strong>，<strong>局部性</strong></p></li><li><p>输出Y是扫描整个图像后与卷积核对应大小的<strong>X</strong>和<strong>W</strong>（卷积核）的<strong>哈达玛积</strong>求和（不是矩阵乘法！！！）</p></li><li><p>重新考察全连接层</p><ul><li><p>输入和输出变形为矩阵（宽度，高度）</p><ul><li><p>原先是将矩阵打平，现在需要空间信息，所以要保留形状</p></li><li><p>因为输入输出都加了一维，所以权重变为<strong>四维张量</strong>（相当于输入为k*l大小的矩阵，输出为i*j大小的矩阵）</p></li></ul></li><li><p>卷积核不能随位置的变化而变化（平移不变性）</p><ul><li><p>当在图片中形成一个识别器后，在一定像素大小的范围内，它都有自己的权重，当这个识别器在图片上换位置之后，他的权重应该不变</p></li><li><p>对于一张图片应该有多个卷积核，但是<strong>每个卷积核要识别一个不同的特征</strong>，一个卷积核就是一个识别器</p></li></ul></li><li><p>将卷积核大小限制在一定范围内，只关注x(i,j)附近的值</p></li></ul></li></ul><h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><ul><li><p>二维卷积层</p><p>  h：height，w：weight</p><p>  输入<strong>X</strong>：nh * nw</p><p>  核<strong>w</strong>：kh * kw</p><p>  偏差b ∈ R</p><p>  输出<strong>Y</strong>：（nh - kh + 1）*（nw - kw + 1） </p></li><li><p>交叉相关 VS 卷积</p><p>  卷积核（实际上是二位交叉相关）旋转180°得到二维卷积</p><p>  由于对称性，在实际使用中没有区别</p></li><li><p>一维和三维交叉相关</p><p>  一维：文本，语言，时序序列</p><p>  三维：视频，医学图像，气象地图</p><p>  二维图象是主流</p></li></ul><p><strong>卷积解决了权重随输入变得过大的问题</strong></p><ul><li>代码实现</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维互相关运算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">corr2d</span>(<span class="params">X, K</span>):</span><br><span class="line">    h, w = K.shape</span><br><span class="line">    Y = torch.zeros((X.shape[<span class="number">0</span>] - h + <span class="number">1</span>, X.shape[<span class="number">1</span>] - w + <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 输出的大小为（X.shape[0] - K.shape[0] + 1）*（X.shape[1] - K.shape[1] + 1）</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="comment"># X（输入）和K（卷积核）哈达玛积求和</span></span><br><span class="line">        <span class="comment"># 遍历X中与K大小相同的所有矩阵</span></span><br><span class="line">            Y[i, j] = (X[i:i + h, j:j + w] * K).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># X = torch.tensor([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])</span></span><br><span class="line"><span class="comment"># K = torch.tensor([[0.0, 1.0], [2.0, 3.0]])</span></span><br><span class="line"><span class="comment"># print(corr2d(X, K))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现二维卷积层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Conv2D</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kernel_size</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.weight = nn.Parameter(torch.rand(kernel_size))</span><br><span class="line">        <span class="comment"># bias计算利用了广播机制</span></span><br><span class="line">        self.bias = nn.Parameter(torch.zeros(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> corr2d(x, self.weight) + self.bias</span><br><span class="line"></span><br><span class="line">X = torch.ones((<span class="number">6</span>, <span class="number">8</span>))</span><br><span class="line">X[:, <span class="number">2</span>:<span class="number">6</span>] = <span class="number">0</span></span><br><span class="line">K = torch.tensor([[<span class="number">1.0</span>, -<span class="number">1.0</span>]])</span><br><span class="line">Y = corr2d(X, K)</span><br><span class="line"></span><br><span class="line"><span class="comment"># nn.Conv2d的参数：通道数，批量大小数，卷积核大小等</span></span><br><span class="line">conv2d = nn.Conv2d(<span class="number">1</span>, <span class="number">1</span>, kernel_size=(<span class="number">1</span>, <span class="number">2</span>), bias=<span class="literal">False</span>)</span><br><span class="line">X = X.reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>))</span><br><span class="line">Y = Y.reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    Y_hat = conv2d(X)</span><br><span class="line">    l = (Y_hat - Y)**<span class="number">2</span></span><br><span class="line">    conv2d.zero_grad()</span><br><span class="line">    l.<span class="built_in">sum</span>().backward()</span><br><span class="line">    <span class="comment"># 学习率：3e-2</span></span><br><span class="line">    <span class="comment"># 手写一个权重衰退</span></span><br><span class="line">    conv2d.weight.data[:] -= <span class="number">3e-2</span> * conv2d.weight.grad</span><br><span class="line">    <span class="keyword">if</span>(i + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'batch <span class="subst">{i + <span class="number">1</span>}</span>, loss <span class="subst">{l.<span class="built_in">sum</span>(): <span class="number">.3</span>f}</span>'</span>)</span><br><span class="line"></span><br><span class="line">conv2d.weight.data.reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="卷积层里的填充与步幅"><a href="#卷积层里的填充与步幅" class="headerlink" title="卷积层里的填充与步幅"></a>卷积层里的填充与步幅</h2><ul><li><p>填充</p><ul><li><p>原因：更大的卷积核可以更快地减小输出大小，形状从nh * nw较少到（nh - kh + 1）*（nw - kw + 1）</p></li><li><p>填充（paddinng）：在输入周围添加额外的行/列，来<strong>控制输出形状的减少量</strong></p></li><li><p>填充ph行和pw列，输出形状为（nh - kh + ph + 1）*（nh - kh + ph + 1）</p></li><li><p><strong>通常取ph = kh - 1，pw = kw - 1</strong>（因为可以消去nh - kh + ph + 1中的- kh + 1）</p></li><li><p>当kh为奇数：在上下两侧填充ph/2</p></li><li><p>当kh为偶数：在上侧填充⌈ph/2⌉（向上取整），在下侧填充⌊ph/2⌋（向下取整）</p></li></ul></li><li><p>步幅</p><ul><li><p>步幅（stride）是指卷积核在行/列的滑动步长，可以<strong>成倍地减少输出形状</strong></p></li><li><p>给定高度sh和宽度sw的步幅，输出形状是⌊(nh − kh + ph + sh )/sh ⌋ × ⌊(nw − kw + pw + sw )/sw ⌋（向下取整）</p></li><li><p>如果ph = kh - 1，pw = kw - 1，输出形状为⌊(nh + sh − 1)/sh ⌋ × ⌊(nw + sw − 1)/sw ⌋</p></li><li><p>如果输入高度和宽度可以被步幅整除  (nh /sh) × (nw /sw)</p></li></ul></li><li><p>代码实现</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comp_conv2d</span>(<span class="params">conv2d, X</span>):</span><br><span class="line">    X = X.reshape((<span class="number">1</span>, <span class="number">1</span>) + X.shape)</span><br><span class="line">    Y = conv2d(X)</span><br><span class="line">    <span class="keyword">return</span> Y.reshape(Y.shape[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下左右各填充一行</span></span><br><span class="line">conv2d = nn.Conv2d(<span class="number">1</span>, <span class="number">1</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">X = torch.rand(size=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(comp_conv2d(conv2d, X).shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将高度和宽度步幅设为2</span></span><br><span class="line">conv2d = nn.Conv2d(<span class="number">1</span>, <span class="number">1</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, stride=<span class="number">2</span>)</span><br><span class="line">comp_conv2d(conv2d, X).shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 稍微复杂一点的例子</span></span><br><span class="line">conv2d = nn.Conv2d(<span class="number">1</span>, <span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">5</span>), padding=(<span class="number">0</span>, <span class="number">1</span>), stride=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">comp_conv2d(conv2d, X).shape</span><br><span class="line"><span class="comment"># 可以用过控制填充和步幅来控制图片长宽比</span></span><br></pre></td></tr></tbody></table></figure><h2 id="卷积层里的多输入多输出通道"><a href="#卷积层里的多输入多输出通道" class="headerlink" title="卷积层里的多输入多输出通道"></a>卷积层里的多输入多输出通道</h2><ul><li><p>多个输入通道<br>  彩色图像可能有RGB三个通道<br>  转换为灰度会丢失信息<br>  每个通道都有一个卷积核，结果是所有卷积结果的和</p><p>  输入<strong>X</strong>：ci × nh × nw<br>  核<strong>W</strong>：ci × kh × kw<br>  输入<strong>Y</strong>：mh × mw</p></li><li><p>多个输出通道<br>  可以有多个三维卷积核，每个核生成一个输出通道，即<strong>每个核对应图片的一个特征</strong></p><p>  输入<strong>X</strong>：ci × nh × nw<br>  核<strong>W</strong>：c0 × ci × kh ×kw<br>  输出<strong>Y</strong>：c0 × mh × mw</p></li><li><p>多个输入和输出通道<br>  每个输出通道可以识别特定模式<br>  输入通道核识别并组合输入中的模式</p></li><li><p>1 × 1卷积核<br>  kh = kw = 1是一个受欢迎的选择。它不识别空间模式，<strong>只是融合通道</strong><br>  因为他不能识别当前像素点周围的信息，即不能识别空间信息<br>  <strong>相当于输入形状为nhnw × ci，权重为c0 × ci的全连接层</strong></p></li><li><p>二维卷积层<br>  输入<strong>X</strong>：ci × nh × nw<br>  核<strong>W</strong>：c0 × ci × kh × kw<br>  偏差<strong>B</strong>：co × ci<br>  输出<strong>Y</strong>：c0 × mh × mw</p></li><li><p>代码实现</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">corr2d_multi_in</span>(<span class="params">X, K</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(d2l.corr2d(x, k) <span class="keyword">for</span> x, k <span class="keyword">in</span> <span class="built_in">zip</span>(X, K))</span><br><span class="line"></span><br><span class="line">X = torch.tensor([[[<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>], [<span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>]],</span><br><span class="line">                  [[<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>], [<span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>], [<span class="number">7.0</span>, <span class="number">8.0</span>, <span class="number">9.0</span>]]])</span><br><span class="line">K = torch.tensor([[[<span class="number">0.0</span>, <span class="number">1.0</span>], [<span class="number">2.0</span>, <span class="number">3.0</span>]], [[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr2d_multi_in(X, K))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">corr2d_multi_in_out</span>(<span class="params">X, K</span>):</span><br><span class="line">    <span class="keyword">return</span> torch.stack([corr2d_multi_in(X, k) <span class="keyword">for</span> k <span class="keyword">in</span> K], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># concat沿着已有的维度拼接，stack在新创建的维度上拼接</span></span><br><span class="line">K = torch.stack((K, K + <span class="number">1</span>, K + <span class="number">2</span>), <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(K.shape)</span><br><span class="line"><span class="built_in">print</span>(corr2d_multi_in_out(X, K))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 x 1 卷积</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">corr2d_multi_in_out_1x1</span>(<span class="params">X, K</span>):</span><br><span class="line">    c_i, h, w = X.shape[<span class="number">0</span>]</span><br><span class="line">    c_o = K.shape[<span class="number">0</span>]</span><br><span class="line">    X = X.reshape((c_i, h * w))</span><br><span class="line">    K = K.reshape((c_o, c_i))</span><br><span class="line">    Y = torch.matmul(K, X)</span><br><span class="line">    <span class="keyword">return</span> Y.reshape(c_o, h, w)</span><br><span class="line"></span><br><span class="line">X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># K的输出通道为2，即有两个卷积核，输入通道为3</span></span><br><span class="line">K = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">Y1 = corr2d_multi_in_out_1x1(X, K)</span><br><span class="line">Y2 = corr2d_multi_in_out(X, K)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">float</span>(torch.<span class="built_in">abs</span>(Y1 - Y2).<span class="built_in">sum</span>()) &lt; <span class="number">1e-6</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-PyTorch神经网络基础</title>
      <link href="/2022/03/11/shen-du-xue-xi-pytorch-shen-jing-wang-luo-ji-chu/"/>
      <url>/2022/03/11/shen-du-xue-xi-pytorch-shen-jing-wang-luo-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-PyTorch神经网络基础"><a href="#深度学习-PyTorch神经网络基础" class="headerlink" title="深度学习-PyTorch神经网络基础"></a>深度学习-PyTorch神经网络基础</h1><h2 id="模型构造"><a href="#模型构造" class="headerlink" title="模型构造"></a>模型构造</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"><span class="comment"># 定义了一些没有包括参数的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module是torch核心</span></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">20</span>, <span class="number">256</span>), nn.ReLU(), nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 这里参数自动初始化</span></span><br><span class="line"><span class="comment"># nn.Sequential定义了一个特殊的Module</span></span><br><span class="line"><span class="comment"># 任何一个层或神经网络都是Module的子类</span></span><br><span class="line"></span><br><span class="line">X = torch.rand(<span class="number">2</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># print(net(X))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多层感知机的实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MLP</span>(nn.Module):</span><br><span class="line"><span class="comment"># 是nn.Module的子类</span></span><br><span class="line"><span class="comment"># 所有的Module都有这两种重要的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hidden = nn.Linear(<span class="number">20</span>, <span class="number">256</span>)</span><br><span class="line">        self.out = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 前向函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">return</span> self.out(F.relu(self.hidden(X)))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># net = MLP()</span></span><br><span class="line"><span class="comment"># print(net(X))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># forward函数不需要调用是因为nn.Module中将__call__函数等价于forward函数。</span></span><br><span class="line"><span class="comment"># Sequential类的作用：把传进来的层按顺序存添加到模块中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySequential</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> args:</span><br><span class="line">            self._modules[block] = block</span><br><span class="line"><span class="comment"># 对所有传进来的层都放在_modules特殊的容器中</span></span><br><span class="line"><span class="comment"># _module是一个ordered dict</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> self._modules.values():</span><br><span class="line">            X = block(X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line"><span class="comment"># net = MySequential(nn.Linear(20, 256), nn.ReLU(), nn.Linear(256, 10))</span></span><br><span class="line"><span class="comment"># print(net(X))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FixedHiddenMLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># rand_weight不参加训练，不能计算梯度</span></span><br><span class="line">        self.rand_weight = torch.rand((<span class="number">20</span>, <span class="number">20</span>), requires_grad=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 非首次初始化需要设置require_grad为True</span></span><br><span class="line">        self.linear = nn.Linear(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        X = self.linear(X)</span><br><span class="line">        X = F.relu(torch.mm(X, self.rand_weight) + <span class="number">1</span>)</span><br><span class="line">        X = self.linear(X)</span><br><span class="line">        <span class="keyword">while</span> X.<span class="built_in">abs</span>().<span class="built_in">sum</span>() &gt; <span class="number">1</span>:</span><br><span class="line">            X /= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> X.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># net = FixedHiddenMLP()</span></span><br><span class="line"><span class="comment"># print(net(X))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以嵌套使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NestMLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.net = nn.Sequential(nn.Linear(<span class="number">20</span>, <span class="number">64</span>), nn.ReLU(),</span><br><span class="line">                                 nn.Linear(<span class="number">64</span>, <span class="number">32</span>), nn.ReLU())</span><br><span class="line">        self.linear = nn.Linear(<span class="number">32</span>, <span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">return</span> self.linear(self.net(X))</span><br><span class="line"></span><br><span class="line">chimera = nn.Sequential(NestMLP(), nn.Linear(<span class="number">16</span>, <span class="number">20</span>), FixedHiddenMLP())</span><br><span class="line">chimera(X)</span><br></pre></td></tr></tbody></table></figure><h2 id="参数管理"><a href="#参数管理" class="headerlink" title="参数管理"></a>参数管理</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(), nn.Linear(<span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line">X = torch.rand(size=(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">net(X)</span><br><span class="line"><span class="comment"># state 状态 OrderedDict类</span></span><br><span class="line"><span class="comment"># net[2]表示最后一层</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].state_dict())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(net[<span class="number">2</span>].bias))</span><br><span class="line"><span class="comment"># &lt;class 'torch.nn.parameter.Parameter'&gt;</span></span><br><span class="line"><span class="comment"># parameter定义的是可以优化的参数</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].bias)</span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].bias.data)</span><br><span class="line"><span class="comment"># 通过.data和.grad访问参数值和梯度</span></span><br><span class="line"><span class="comment"># 没有进行反向传播，所以没有梯度</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.grad == <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性访问所有参数</span></span><br><span class="line"><span class="comment"># *号解压可迭代对象,在列表前加*号,会将列表拆分成一个一个的独立元素,不光是列表、元组、字典，</span></span><br><span class="line"><span class="comment"># 通过named_parameters()函数获取整个网络的参数</span></span><br><span class="line"><span class="built_in">print</span>(*[(name, param.shape) <span class="keyword">for</span> name, param <span class="keyword">in</span> net[<span class="number">0</span>].named_parameters()])</span><br><span class="line"><span class="built_in">print</span>(*[(name, param.shape) <span class="keyword">for</span> name, param <span class="keyword">in</span> net.named_parameters()])</span><br><span class="line"><span class="built_in">print</span>(net.state_dict()[<span class="string">'2.bias'</span>].data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从嵌套块收集参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block1</span>():</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(), nn.Linear(<span class="number">8</span>, <span class="number">4</span>),</span><br><span class="line">                         nn.ReLU())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block2</span>():</span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        net.add_module(<span class="string">f'block<span class="subst">{i}</span>'</span>, block1())</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line">rgnet = nn.Sequential(block2(), nn.Linear(<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(rgnet(X))</span><br><span class="line"><span class="built_in">print</span>(rgnet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_normal</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        <span class="comment"># 判断是否为全连接层</span></span><br><span class="line">        <span class="comment"># 加_表示替换函数，直接改变输入的值，不返回值</span></span><br><span class="line">        nn.init.normal_(m.weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line">        nn.init.zeros_(m.bias)</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply()对所有的层进行遍历修改参数</span></span><br><span class="line"><span class="comment"># 给一个方式遍历整个神经网络进行修改</span></span><br><span class="line">net.apply(init_normal)</span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">0</span>].weight.data[<span class="number">0</span>], net[<span class="number">0</span>].bias.data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_constant</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">       nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">       nn.init.zeros_(m.bias)</span><br><span class="line"></span><br><span class="line">net.apply(init_constant)</span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">0</span>].weight.data[<span class="number">0</span>], net[<span class="number">0</span>].bias.data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对某些块使用不同的初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xavier</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.xavier_uniform_(m.weight)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_42</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义初始化</span></span><br><span class="line"><span class="comment"># 可以直接替换修改或者自定义一个初始化方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数绑定</span></span><br><span class="line"><span class="comment"># 参数共享</span></span><br><span class="line">shared = nn.Linear(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># 若修改其中一个参数，共享的参数也改变</span></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(), shared, nn.ReLU(), shared, nn.ReLU(), nn.Linear(<span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line">net(X)</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义层"><a href="#自定义层" class="headerlink" title="自定义层"></a>自定义层</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CenteredLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">return</span> X - X.mean()</span><br><span class="line"></span><br><span class="line">layer = CenteredLayer()</span><br><span class="line"><span class="built_in">print</span>(layer(torch.FloatTensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])))</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">8</span>, <span class="number">128</span>), CenteredLayer())</span><br><span class="line">Y = net(torch.rand(<span class="number">4</span>, <span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(Y.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数的层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinear</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_units, units</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 需要把参数放进Parameter里</span></span><br><span class="line">        self.weight = nn.Parameter(torch.randn(in_units, units))</span><br><span class="line">        self.bias = nn.Parameter(torch.randn(units, ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        linear = torch.matmul(X, self.weight.data) + self.bias.data</span><br><span class="line">        <span class="keyword">return</span> F.relu(linear)</span><br><span class="line"></span><br><span class="line">dense = MyLinear(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">dense.weight</span><br></pre></td></tr></tbody></table></figure><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读写文件</span></span><br><span class="line">x = torch.arange(<span class="number">4</span>)</span><br><span class="line">torch.save(x, <span class="string">'x-file'</span>)</span><br><span class="line"></span><br><span class="line">x2 = torch.load(<span class="string">'x-file'</span>)</span><br><span class="line">x2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储列表</span></span><br><span class="line">y = torch.zeros(<span class="number">4</span>)</span><br><span class="line">torch.save([x, y], <span class="string">'x-files'</span>)</span><br><span class="line">x2, y2 = torch.load(<span class="string">'x-files'</span>)</span><br><span class="line">(x2, y2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储字典</span></span><br><span class="line">mydict = {<span class="string">'x'</span>: x, <span class="string">'y'</span>: y}</span><br><span class="line">torch.save(mydict, <span class="string">'mydict'</span>)</span><br><span class="line">mydict2 = torch.load(<span class="string">'mydict'</span>)</span><br><span class="line">mydict2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载和保存模型参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hidden = nn.Linear(<span class="number">20</span>, <span class="number">256</span>)</span><br><span class="line">        self.output = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.output(F.relu(self.hidden(x)))</span><br><span class="line"></span><br><span class="line">net = MLP()</span><br><span class="line">X = torch.randn(size=(<span class="number">2</span>, <span class="number">20</span>))</span><br><span class="line">Y = net(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pytorch不能把整个模型的定义存储下来（有别的方法）</span></span><br><span class="line"><span class="comment"># 存储权重即可，但读取的时候要重新实例化一个模型，计算部分不存储</span></span><br><span class="line"><span class="comment"># 读取时需要把模型定义带走</span></span><br><span class="line"><span class="comment"># 将模型参数存储为字典</span></span><br><span class="line">torch.save(net.state_dict(), <span class="string">'mlp.params'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load</span></span><br><span class="line">clone = MLP()</span><br><span class="line">clone.load_state_dict(torch.load(<span class="string">'mlp.params'</span>))</span><br><span class="line">clone.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">Y_clone = clone(X)</span><br><span class="line">Y_clone == Y</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析-希腊</title>
      <link href="/2022/03/09/shu-ju-fen-xi-xi-la/"/>
      <url>/2022/03/09/shu-ju-fen-xi-xi-la/</url>
      
        <content type="html"><![CDATA[<h1 id="好想去希腊啊啊啊"><a href="#好想去希腊啊啊啊" class="headerlink" title="好想去希腊啊啊啊"></a>好想去希腊啊啊啊</h1><p>因为想去希腊旅游，所以顺便做了一份小小的攻略（算是吧  <span class="github-emoji"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主页网址及请求头</span></span><br><span class="line">urls = [<span class="string">'https://you.ctrip.com/countrysightlist/greece100036/p{}.html'</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>, <span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取源代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethtmltext</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">        res.raise_for_status()</span><br><span class="line">        res.encoding = res.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主页解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parsepage</span>(<span class="params">url</span>):</span><br><span class="line">    links1 = []</span><br><span class="line">    text = gethtmltext(url)</span><br><span class="line">    soup = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">    items = soup.select(<span class="string">'div.list_mod1&gt;dl&gt;dd'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        tag = i.find(<span class="string">'a'</span>)</span><br><span class="line">        name = tag.text</span><br><span class="line">        link = tag[<span class="string">'href'</span>]</span><br><span class="line">        links1.append([name, link])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> links1</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获得景点速览链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getlinks3</span>():</span><br><span class="line">    links3 = []</span><br><span class="line">    links4 = []</span><br><span class="line">    links5 = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        links = parsepage(url)</span><br><span class="line">        links3.append(links)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> links3:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">            links4.append(i)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(links4), <span class="number">2</span>):</span><br><span class="line">        links5.append(<span class="string">'https://you.ctrip.com/'</span> + links4[k][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> links5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得链接中的数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getdigit</span>(<span class="params">url</span>):</span><br><span class="line">    url = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">str</span>.isdigit, url))</span><br><span class="line">    digit = <span class="built_in">int</span>(<span class="string">''</span>.join(url))</span><br><span class="line">    <span class="keyword">return</span> digit</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 景点速览页面解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parsepages</span>(<span class="params">links</span>):</span><br><span class="line">    names1 = []</span><br><span class="line">    wenttimes = []</span><br><span class="line">    wanttimes = []</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">        r = requests.get(link, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">        text = r.text</span><br><span class="line">        soup = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">        <span class="comment"># 获取城市名称</span></span><br><span class="line">        item = soup.select(<span class="string">'div.f_left h1'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> item:</span><br><span class="line">            tag = i.find(<span class="string">'a'</span>)</span><br><span class="line">            name = tag.text</span><br><span class="line">            names1.append(name)</span><br><span class="line">        <span class="comment"># 爬取动态网页数据（XHR）</span></span><br><span class="line">        resource = getdigit(link)</span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">'Resource'</span>: <span class="string">'{}'</span>.<span class="built_in">format</span>(resource),</span><br><span class="line">            <span class="string">'pageType'</span>: <span class="string">'Place'</span>,</span><br><span class="line">        }</span><br><span class="line">        r = requests.post(<span class="string">"https://you.ctrip.com/Destinationsite/SharedComm/ShowGowant"</span>, data=data, headers=headers)</span><br><span class="line">        wenttime = r.json()[<span class="string">'WentTimes'</span>]</span><br><span class="line">        wanttime = r.json()[<span class="string">'WantTimes'</span>]</span><br><span class="line">        wenttimes.append(wenttime)</span><br><span class="line">        wanttimes.append(wanttime)</span><br><span class="line">    datas = np.array([names1, wenttimes, wanttimes]).T</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'希腊各城市旅游人数.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_writer = csv.writer(file)</span><br><span class="line">        csv_writer.writerows(datas)</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 画出柱状图以及饼图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawpicture</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'希腊各城市旅游人数.csv'</span>, <span class="string">'rt'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_reader = csv.reader(file)</span><br><span class="line">        names1 = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'希腊各城市旅游人数.csv'</span>, <span class="string">'rt'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_reader = csv.reader(file)</span><br><span class="line">        wenttimes = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'希腊各城市旅游人数.csv'</span>, <span class="string">'rt'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_reader = csv.reader(file)</span><br><span class="line">        wanttimes = [row[<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader]</span><br><span class="line">    wenttimes = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> wenttimes]</span><br><span class="line">    wanttimes = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> wanttimes]</span><br><span class="line">    plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.xticks(rotation=<span class="number">300</span>)</span><br><span class="line">    plt.title(<span class="string">'各个城市旅游人数'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'城市'</span>)</span><br><span class="line">    x = names1</span><br><span class="line">    y1 = wenttimes</span><br><span class="line">    y2 = wanttimes</span><br><span class="line">    plt.plot(x, y1, label=<span class="string">'去过'</span>)</span><br><span class="line">    plt.plot(x, y2, label=<span class="string">'想去'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    labels = names1[:<span class="number">4</span>]</span><br><span class="line">    nums = wenttimes[:<span class="number">4</span>]</span><br><span class="line">    plt.pie(nums, labels=labels, autopct=<span class="string">'%0.1f%%'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 排序存csv</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sortvalue</span>(<span class="params">links</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">'希腊各城市旅游人数.csv'</span>, delimiter=<span class="string">','</span>, header=<span class="literal">None</span>)</span><br><span class="line">    df[<span class="number">3</span>] = links</span><br><span class="line">    df.sort_values(by=<span class="number">1</span>, inplace=<span class="literal">True</span>, axis=<span class="number">0</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    cities = df.loc[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    cities.to_csv(<span class="string">'希腊热门城市.csv'</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    links = getlinks3()</span><br><span class="line">    parsepages(links)</span><br><span class="line">    drawpicture()</span><br><span class="line">    sortvalue(links)</span><br><span class="line">    lastlinks = plan.getplacelink()</span><br><span class="line">    plan.getinformation(lastlinks)</span><br><span class="line">    plan.cloudpicture()</span><br></pre></td></tr></tbody></table></figure><h2 id="plan包"><a href="#plan包" class="headerlink" title="plan包"></a>plan包</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">jieba.setLogLevel(jieba.logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">poiID = [<span class="string">'78674'</span>, <span class="string">'89074'</span>, <span class="string">'10532420'</span>, <span class="string">'89071'</span>, <span class="string">'98597'</span>, <span class="string">'95446'</span>, <span class="string">'95468'</span>, <span class="string">'13271242'</span>, <span class="string">'95469'</span>, <span class="string">'10547255'</span>, <span class="string">'96613'</span>, <span class="string">'98965'</span>, <span class="string">'96623'</span>, <span class="string">'81903'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得各城市景点链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getplacelink</span>():</span><br><span class="line">    df = pd.read_csv(<span class="string">'希腊热门城市.csv'</span>, delimiter=<span class="string">','</span>, header=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    link = df[<span class="number">3</span>]</span><br><span class="line">    lastlinks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> link:</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        r = requests.get(i, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">'html.parser'</span>)</span><br><span class="line">        ii = soup.select(<span class="string">'div.rdetailbox&gt;dl&gt;dt'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ii:</span><br><span class="line">            tag = i.find(<span class="string">'a'</span>)</span><br><span class="line">            lastlink = tag[<span class="string">'href'</span>]</span><br><span class="line">            lastlinks.append(lastlink)</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    lastlinks.pop(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> lastlinks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得景点列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getinformation</span>(<span class="params">lastlinks</span>):</span><br><span class="line">    names = []</span><br><span class="line">    scores = []</span><br><span class="line">    opentimes = []</span><br><span class="line">    comments = []</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    ID = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ids <span class="keyword">in</span> poiID:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">            payload = {<span class="string">"arg"</span>:{<span class="string">"channelType"</span>:<span class="number">2</span>,</span><br><span class="line">                              <span class="string">"collapseType"</span>:<span class="number">0</span>,</span><br><span class="line">                              <span class="string">"commentTagId"</span>:<span class="number">0</span>,</span><br><span class="line">                              <span class="string">"pageIndex"</span>:page,</span><br><span class="line">                              <span class="string">"pageSize"</span>:<span class="number">10</span>,</span><br><span class="line">                              <span class="string">"poiId"</span>: ids,</span><br><span class="line">                              <span class="string">"sourceType"</span>:<span class="number">1</span>,</span><br><span class="line">                              <span class="string">"sortType"</span>:<span class="number">3</span>,</span><br><span class="line">                              <span class="string">"starType"</span>:<span class="number">0</span>},</span><br><span class="line">                       <span class="string">"head"</span>:{<span class="string">"cid"</span>:<span class="string">"09031145113668832314"</span>,</span><br><span class="line">                               <span class="string">"ctok"</span>:<span class="string">""</span>,</span><br><span class="line">                               <span class="string">"cver"</span>:<span class="string">"1.0"</span>,</span><br><span class="line">                               <span class="string">"lang"</span>:<span class="string">"01"</span>,</span><br><span class="line">                               <span class="string">"sid"</span>:<span class="string">"8888"</span>,</span><br><span class="line">                               <span class="string">"syscode"</span>:<span class="string">"09"</span>,</span><br><span class="line">                               <span class="string">"auth"</span>:<span class="string">""</span>,</span><br><span class="line">                               <span class="string">"xsid"</span>:<span class="string">""</span>,</span><br><span class="line">                               <span class="string">"extension"</span>:[]}}</span><br><span class="line">            ID.append(payload)</span><br><span class="line"></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> lastlink <span class="keyword">in</span> lastlinks:</span><br><span class="line">        r = requests.get(lastlink, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">'html.parser'</span>)</span><br><span class="line">        ii = soup.select(<span class="string">'div.title'</span>)</span><br><span class="line">        <span class="comment"># 获取各城市景点名称</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ii:</span><br><span class="line">            tag = i.find(<span class="string">'h1'</span>)</span><br><span class="line">            name = tag.text</span><br><span class="line">            names.append(name)</span><br><span class="line">        <span class="comment"># 获取各景点评论</span></span><br><span class="line">        <span class="keyword">for</span> x1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            r = requests.post(<span class="string">'https://m.ctrip.com/restapi/soa2/13444/json/getCommentCollapseList'</span>, data=json.dumps(ID[x]), headers=headers).text</span><br><span class="line">            html = json.loads(r)</span><br><span class="line">            items = html[<span class="string">'result'</span>][<span class="string">'items'</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">                comment = i[<span class="string">'content'</span>]</span><br><span class="line">                comments.append(comment)</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="built_in">str</span>(y) + <span class="string">'.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            csv_writer = csv.writer(file)</span><br><span class="line">            csv_writer.writerows(comments)</span><br><span class="line">        comments.clear()</span><br><span class="line">        y = y + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 词云</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cloudpicture</span>():</span><br><span class="line">    image_save = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">        image_save.append(<span class="string">f'D://xila//<span class="subst">{a + <span class="number">1</span>}</span>.png'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="built_in">str</span>(i) + <span class="string">'.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        text0 = f.read()</span><br><span class="line">        text = text0.replace(<span class="string">'，'</span>, <span class="string">''</span>).replace(<span class="string">'。'</span>, <span class="string">''</span>).replace(<span class="string">'：'</span>, <span class="string">''</span>).replace(<span class="string">'！'</span>, <span class="string">''</span>).replace(<span class="string">'？'</span>, <span class="string">''</span>).replace(<span class="string">'“'</span>, <span class="string">''</span>).replace(<span class="string">'【'</span>, <span class="string">''</span>).replace(<span class="string">'】'</span>, <span class="string">''</span>).replace(<span class="string">'；'</span>, <span class="string">''</span>).replace(<span class="string">'&amp;'</span>, <span class="string">''</span>).replace(<span class="string">','</span>, <span class="string">''</span>).replace(<span class="string">'.'</span>, <span class="string">''</span>).replace(<span class="string">'#'</span>, <span class="string">''</span>).replace(<span class="string">';'</span>, <span class="string">''</span>).replace(<span class="string">'、'</span>, <span class="string">''</span>).replace(<span class="string">'"'</span>, <span class="string">''</span>)</span><br><span class="line">        txt_list = jieba.lcut(text)</span><br><span class="line">        texts = <span class="string">' '</span>.join(txt_list)</span><br><span class="line">        <span class="built_in">print</span>(texts)</span><br><span class="line">        word_path = <span class="string">'msyh.ttc'</span></span><br><span class="line">        cloud = wordcloud.WordCloud(</span><br><span class="line">                                    font_path=word_path,</span><br><span class="line">                                    background_color=<span class="string">"white"</span>,</span><br><span class="line">                                    scale=<span class="number">15</span>,</span><br><span class="line">                                    stopwords={<span class="string">'的'</span>, <span class="string">'是'</span>, <span class="string">'x20'</span>, <span class="string">'了'</span>, <span class="string">'x0A'</span>, <span class="string">'x2F'</span>, <span class="string">'x0D'</span>, <span class="string">'和'</span>, <span class="string">'去'</span>, <span class="string">'x0Ax0A'</span>, <span class="string">'xOAxOA'</span>,</span><br><span class="line">                                               <span class="string">'xOAxO9xOA'</span>, <span class="string">'x0Ax09x0A'</span>, <span class="string">'x0Ax0A'</span>}</span><br><span class="line">                                    )</span><br><span class="line"></span><br><span class="line">        cloud.generate(texts)</span><br><span class="line">        cloud.to_file(image_save[i])</span><br><span class="line">        f.close()</span><br></pre></td></tr></tbody></table></figure><p>当然代码还是不够完美，以后会慢慢改进的</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-数值稳定性+模型初始化和激活函数</title>
      <link href="/2022/03/08/shen-du-xue-xi-shu-zhi-wen-ding-xing-mo-xing-chu-shi-hua-he-ji-huo-han-shu/"/>
      <url>/2022/03/08/shen-du-xue-xi-shu-zhi-wen-ding-xing-mo-xing-chu-shi-hua-he-ji-huo-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-数值稳定性-模型初始化和激活函数"><a href="#深度学习-数值稳定性-模型初始化和激活函数" class="headerlink" title="深度学习-数值稳定性+模型初始化和激活函数"></a>深度学习-数值稳定性+模型初始化和激活函数</h1><h2 id="数值稳定性"><a href="#数值稳定性" class="headerlink" title="数值稳定性"></a>数值稳定性</h2><ul><li><p>概述</p><p>  有关数值稳定性的典型问题是衰减和爆炸</p></li><li><p>来源</p><p>  设神经网络有d层，计算损失l关于参数wt的梯度，需要做（d-t）次矩阵乘法，容易引起梯度爆炸和梯度消失，<strong>本质上都是由于深度神经网络的反向传播造成的</strong></p></li><li><p>梯度爆炸的问题</p><ul><li><p>值超出值域（infinity）</p><p>  对于16位浮点数尤为严重（数值区间6e-5 - 6e4）</p></li><li><p>对学习率敏感<br>  学习率太大 -&gt; 大参数值 -&gt; 更大的梯度</p><p>  （反向传播，学习率变大 -&gt; 参数值变大 -&gt; 梯度变大）</p><p>  学习率太小 -&gt; 训练无进展</p><p>  需要在训练过程中不管调整学习率</p></li></ul></li><li><p>梯度消失的问题</p><p>  以sigmoid激活函数为例，当输入较大时，sigmoid激活函数的梯度变得很小，趋近于0。</p><ul><li><p>梯度值变成0</p><p>  对于16位浮点数尤为严重（数值区间6e-5 - 6e4）</p></li><li><p>训练没有进展（不管如何选择学习率）</p></li><li><p>对于底部层尤为严重</p><p>  仅仅顶部层训练的较好</p><p>  无法让神经网络更深（无论有多少层，都和一个浅层神经网络类似）</p></li></ul></li><li><p>关于学习率η</p><ul><li><p>学习率过大，会导致<strong>参数弹跳</strong>，损失项<strong>可能不会在每次迭代都下降</strong>，使损失项错过最小值，反而导致参数变大，使梯度变大。</p></li><li><p>学习率过小，难以到达最小值，收敛的很慢，导致训练无进展</p></li><li><p>推荐学习率：0.001， 0.003，0.01， 0.03， 0.1， 0.3， 1 ……（成三倍增长）</p></li></ul><p>  （自动收敛测试方法：当损失项的值小于一个很小的值ε（可以是1e-3）时，判断为已收敛，但是一般来说，选取一个合适的阈值ε是非常困难的，所以要找到一个合适的阈值更好的方法还是画曲线图。）</p></li></ul><h2 id="模型初始化"><a href="#模型初始化" class="headerlink" title="模型初始化"></a>模型初始化</h2><ul><li><p>让训练更加稳定</p><p>  目标：让梯度值在合理的范围内（如[1e-6, 1e3]）</p><p>  方法：</p><ul><li><p>将乘法变加法，如ResNet，LSTM</p></li><li><p>归一化，如梯度归一化（如把梯度改为均值，方差为固定数值的数，把梯度拉到一定范围内），梯度裁剪（强行把梯度减到一个范围内，如大于5则变为5，小于-5则变为-5）</p></li><li><p>合理的权重初始和激活函数</p></li></ul></li><li><p>让每层的方差是一个常数</p><ul><li><p>将每层的输出和梯度都看作随机变量</p></li><li><p>让他们的均值和方差都保持一致</p></li></ul></li><li><p>权重初始化</p><ul><li><p>在合理值区间里随机出是参数</p></li><li><p>训练开始的时候更容易有数值不稳定</p><ol><li><p>远离最优解的地方损失函数表面可能很复杂。（导致梯度很大，从而导致更大的参数值）</p></li><li><p>最优解附近表面可能会比较平</p></li></ol></li><li><p>使用N(0, 0.01)来初始可能对小网络没问题，但不能保证深度神经网络</p></li></ul></li><li><p>Xavier初始</p><p>  原因：难以满足输入值个数(nt-1)和输出值个数(nt)相同</p><p>  Xavier使得  t层方差   = （t层输入值个数）+（t层输出值个数）/  2</p><p>  适配权重形状变换，特别是nt</p></li></ul><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><ul><li><p>据推理可得所使用的激活函数必须是它本身，即σ(x) = x</p><p>  sigmoid(x) = 1/2 + x/4 - x^3 / 48 + O(x^5)</p><p>  relu(x) = 0 + x     for x &gt;= 0</p><p>  tanh(x) = 0 + x - x^3 / 3 + O(x*x*x*x*x)</p><p>  relu(x)与tanh(x)符合条件</p><p>  sigmoid函数需要调整为  4*sigmoid(x)-2</p></li></ul><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ol><li><p>Q：nan,inf怎么产生，如何让解决？</p><p>A：inf通常是权重初始值太大或者学习率太大</p><p>nan通常是一个值除0</p><p>解决：合理初始化权重，激活函数选择，学习率不要太大</p><p>把学习率一直向小调整直到inf或nan不出现</p></li><li><p>Q：为什么16位浮点影响严重？</p><p>A：传统高性能运算是64位，python的默认数据类型是64位，32位更常用。如芯片如果用16位浮点数，比32位快2倍，比64位快4倍。对做训练时的梯度有影响。bf16开始取代 fp16。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-丢弃法</title>
      <link href="/2022/03/07/shen-du-xue-xi-diu-qi-fa/"/>
      <url>/2022/03/07/shen-du-xue-xi-diu-qi-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-丢弃法"><a href="#深度学习-丢弃法" class="headerlink" title="深度学习-丢弃法"></a>深度学习-丢弃法</h1><ul><li><p>概述<br>  丢弃法也可以用来应对过拟合问题（倒置丢弃法）</p></li><li><p>方法</p><ul><li><strong>一个好的模型需要对输入数据的扰动鲁棒</strong></li><li>当对隐藏层使用丢弃法时，该层的隐藏单元有一定概率被丢弃掉。设丢弃概率为p，那么p的概率为hi会被清零，有1-p的概率hi会除以1-p做拉伸</li></ul></li><li><p>解释</p><ul><li>由于在训练中隐藏层神经元的丢弃是随机的，即h1,……,hi都有可能被清零，<strong>输出层的计算无法过度依赖h1,……,hi中的任一个</strong>，从而在训练模型时起到正则化的作用，并可以用来应对过拟合。</li><li>在测试模型时，我们为了得到更加确定性的结果，一般<strong>不使用</strong>丢弃法。</li></ul></li><li><p>补充</p><ul><li>丢弃法不改变其输入的期望值</li><li>丢弃法在<strong>层中</strong>加入噪音</li><li>正则项只在<strong>训练中</strong>使用</li><li>使用有噪音的数据等价于Tikhonov正则</li></ul></li></ul><h2 id="丢弃法从零开始实现"><a href="#丢弃法从零开始实现" class="headerlink" title="丢弃法从零开始实现"></a>丢弃法从零开始实现</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> d2lzh <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon, init, nd, autograd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss, nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dropout</span>(<span class="params">X, drop_prob</span>):</span><br><span class="line"><span class="keyword">assert</span> <span class="number">0</span> &lt;= drop_prob &lt;= <span class="number">1</span></span><br><span class="line"><span class="comment"># assert 表达式，又称断言语句，可以看作是功能缩小版的if语句，用于判断表达式的值，如果为错，python解释器会报错。</span></span><br><span class="line">keep_prob = <span class="number">1</span> - drop_prob</span><br><span class="line"><span class="keyword">if</span> keep_prob == <span class="number">0</span>：</span><br><span class="line"><span class="keyword">return</span> X.zeros_like()</span><br><span class="line"><span class="comment"># 保留概率为0，即丢弃概率为1，返回与X形状相同的全为0的矩阵</span></span><br><span class="line">mask = nd.random.uniform(<span class="number">0</span>, <span class="number">1</span>, X.shape) &lt; keep_prob</span><br><span class="line"><span class="comment"># mask是一个由0和1组成的形状为X的矩阵</span></span><br><span class="line"><span class="comment"># uniform()方法将随机生成下一个实数，它在[x, y]范围内。</span></span><br><span class="line"><span class="keyword">return</span> mask * X / keep_prob</span><br><span class="line"><span class="comment"># 做乘法远比从中选元素快得多</span></span><br><span class="line"></span><br><span class="line">num_inputs, num_outputs, num_hiddens1, num_hiddens2 = <span class="number">784</span>, <span class="number">10</span>, <span class="number">256</span>, <span class="number">256</span></span><br><span class="line"><span class="comment"># 两个隐藏层</span></span><br><span class="line">w1 = nd.random.normal(scale=<span class="number">0.01</span>, shape=(num_inputs, num_hiddens1))</span><br><span class="line">b1 = nd.zeros(num_hiddens1)</span><br><span class="line">w2 = nd.random.mormal(scale=<span class="number">0.01</span>, shape=(num_hiddens1, num_hiddens2))</span><br><span class="line">b2 = nd.zeros(num_hiddens2)</span><br><span class="line">w3 = nd.random.normal(scale=<span class="number">0.01</span>, shape=(num_hiddens2, num_outputs))</span><br><span class="line">b3 = nd.zeros(num_outputs)</span><br><span class="line"></span><br><span class="line">params = [w1, b1, w2, b2, w3, b3]</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃概率</span></span><br><span class="line">drop_prob1, drop_prob = <span class="number">0.2</span>, <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于神经网络</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">net</span>(<span class="params">X</span>):</span><br><span class="line"><span class="comment"># 如果shape参数中包含特殊值-1，即将该数组打平，变成一维，先行后列。</span></span><br><span class="line">X = X.reshape((-<span class="number">1</span>, num_inputs))</span><br><span class="line">H1 = (nd.dot(X, w1) + b1).relu()</span><br><span class="line"><span class="comment"># 只在训练模型时使用丢弃法</span></span><br><span class="line"><span class="keyword">if</span> autograd.is_training():</span><br><span class="line">H1 = dropout(H1, drop_prob1)</span><br><span class="line"><span class="comment"># 在第一层全连接层后添加丢弃层</span></span><br><span class="line">H2 = (nd.dot(H1, w2) + b2).relu()</span><br><span class="line"><span class="keyword">if</span> autograd.is_training():</span><br><span class="line">H2 = dropout(H2, drop_prob2)</span><br><span class="line"><span class="comment"># 在第二层全连接层后添加丢弃层</span></span><br><span class="line"><span class="keyword">return</span> nd.dot(H2, w3) + b3</span><br><span class="line"></span><br><span class="line">num_epochs, lr, batch_size = <span class="number">5</span>, <span class="number">0.5</span>, <span class="number">256</span></span><br><span class="line">loss = gloss.SoftmaxCrossEntropyLoss()</span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, params, lr)</span><br></pre></td></tr></tbody></table></figure><h2 id="丢弃法简洁实现"><a href="#丢弃法简洁实现" class="headerlink" title="丢弃法简洁实现"></a>丢弃法简洁实现</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据收集如上</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line">net.add(nn.Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>)</span><br><span class="line">nn.Dropout(drop_prob1)</span><br><span class="line">nn.Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>)</span><br><span class="line">nn.Dropout(drop_prob2)</span><br><span class="line">nn.Dense(<span class="number">10</span>))</span><br><span class="line">net.initialize(init.Normal(sigma=<span class="number">0.01</span>))</span><br><span class="line"></span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, {<span class="string">'learning_rate'</span>: lr})</span><br><span class="line">loss = gloss.SoftmaxCrossEntropyLoss()</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, <span class="literal">None</span>, <span class="literal">None</span>, trainer)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-权重衰退</title>
      <link href="/2022/03/07/shen-du-xue-xi-quan-chong-shuai-tui/"/>
      <url>/2022/03/07/shen-du-xue-xi-quan-chong-shuai-tui/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-权重衰退"><a href="#深度学习-权重衰退" class="headerlink" title="深度学习-权重衰退"></a>深度学习-权重衰退</h1><ul><li><p>使用均方范数作为<strong>硬性</strong>限制</p><p>  通过限制参数值的选择范围来控制模型容量<br>  min l(<strong>W</strong>, b)  subject to ||<strong>w</strong>||2(平方) &lt;= θ</p><p>  <strong>硬性限制是指每个w都必须小于θ</strong></p><p>  通常不限制偏移b(限不限制都差不多)(整个数据在零点的偏移)</p><p>  小的θ意味着更强的正则项</p></li><li><p>使用均方范数作为<strong>柔性</strong>限制</p><p>  罚（penalty）：λ/2*||<strong>w</strong>||2</p><p>  <strong>不是硬性要求，更平滑一点，不一定每一个w都在一定范围内</strong></p><p>  超参数λ控制了正则项的重要程度</p><p>  通过增加λ来减小模型复杂度</p><p>  λ等于0时，惩罚项完全不起作用</p><p>  λ越大，使得最优解越向原点靠近，即趋近于零</p></li><li><p>关于图的理解</p><ul><li><p>绿线：只优化损失函数的等高线</p></li><li><p>黄线：罚，以原点为中心的等高线</p></li><li><p>损失函数加正则项成为目标函数，目标函数最优解不是损失函数最优解。</p></li><li><p>加入罚之后原始解变得不是很优，对于罚来说很大，把最优解向原点拉动，l（损失）的值虽然变大，但罚的项变小。罚对原始最优解的拉动力较大，直到达到平衡点（增加值和减小值相等时）。总体来看，罚使得最优解向原点走。</p></li><li><p>首先要明确的是，w选择范围过大会使得模型可以拟合任意函数，使模型复杂度过大，导致过拟合。所以解决过拟合问题的思路应该是使w下降，方法之一是权重衰退。</p></li><li><p>所以过程大概是：过拟合 -&gt; w过大 -&gt; 为减小w，加入罚 -&gt; 最优解向原点拉动 -&gt; w绝对值减小 -&gt; 权重衰退 -&gt; 模型复杂度降低</p></li></ul></li></ul><p>L2范数<strong>正则化</strong>又称权重衰退</p><p>权重衰退通过<strong>惩罚绝对值较大的模型参数</strong>为需要学习的模型增加了限制，这可能对过拟合有效。</p><h2 id="权重衰退简洁实现"><a href="#权重衰退简洁实现" class="headerlink" title="权重衰退简洁实现"></a>权重衰退简洁实现</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> d2lzh <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd, gluon, init, nd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss, data <span class="keyword">as</span> gdata, nn</span><br><span class="line"></span><br><span class="line">n_train, n_test, num_inputs = <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">true_w, true_b = nd.ones((num_inputs, <span class="number">1</span>)) * <span class="number">0.01</span>, <span class="number">0.05</span></span><br><span class="line">features = nd.random.normal(shape=(n_train + n_test, num_inputs))</span><br><span class="line">labels = nd.dot(features, true_w) + true_b</span><br><span class="line">labels += nd.random.normal(scale=<span class="number">0.01</span>, shape=labels.shape)</span><br><span class="line">train_features, test_features = features[:n_train, :], features[n_train:, :]</span><br><span class="line">train_labels, test_labels = labels[:n_train], labels[n_train:]</span><br><span class="line"></span><br><span class="line">batch_size, num_epochs, lr = <span class="number">1</span>, <span class="number">100</span>, <span class="number">0.03</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fit_and_plot_gluon</span>(<span class="params">wd</span>):</span><br><span class="line"><span class="comment"># wd相当于</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line">net.add(nn.Dense(<span class="number">1</span>))</span><br><span class="line">net.initialize(init.Normal(sigma=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接在构造Trainer实例时通过wd参数来指定权重衰减超参数</span></span><br><span class="line"><span class="comment"># 默认下，gluon会对权重和偏差同时衰减</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅对权重参数衰减，权重名称一般以weight结尾</span></span><br><span class="line">trainer_w = gluon.Trainer(net.collect_params(<span class="string">'.*weight'</span>), <span class="string">'sgd'</span>, {<span class="string">'learning_rate'</span>: lr, <span class="string">'wd'</span>: wd})</span><br><span class="line"><span class="comment"># 不对偏差参数衰减，偏差名称一般是以bias结尾</span></span><br><span class="line">trainer_b = gluon.Trainer(net.collect_params(<span class="string">'.*bias'</span>), <span class="string">'sgd'</span>, {<span class="string">'learning_rate'</span>: lr})</span><br><span class="line"></span><br><span class="line">train_ls, teat_ls = [], []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line"><span class="keyword">with</span> autograd.record():</span><br><span class="line">l = loss(net(X), y)</span><br><span class="line">l.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对两个Trainer实例分别调用step函数，从而分别更新权重和偏差</span></span><br><span class="line">trainer_w.step(batch_size)</span><br><span class="line">trainer_b.step(batch_size)</span><br><span class="line"></span><br><span class="line">train_ls.append(loss(net(train_features), train_labels).mean().asscalar())</span><br><span class="line">test_ls.append(loss(net(test_features), test_labels).mean().asscalar())</span><br><span class="line">d2l.semilogy(<span class="built_in">range</span>(<span class="number">1</span>, num_epochs + <span class="number">1</span>), train_ls, <span class="string">'epoch'</span>, <span class="string">'loss'</span>,</span><br><span class="line"> <span class="built_in">range</span>(<span class="number">1</span>, num_epochs + <span class="number">1</span>), test_ls, [<span class="string">'train'</span>, <span class="string">'test'</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'L2 norm of w:'</span>, net[<span class="number">0</span>].weight.data().norm().asscalar())</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-模型选择+过拟合和欠拟合</title>
      <link href="/2022/03/07/shen-du-xue-xi-mo-xing-xuan-ze-guo-ni-he-he-qian-ni-he/"/>
      <url>/2022/03/07/shen-du-xue-xi-mo-xing-xuan-ze-guo-ni-he-he-qian-ni-he/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-模型选择-过拟合和欠拟合"><a href="#深度学习-模型选择-过拟合和欠拟合" class="headerlink" title="深度学习-模型选择+过拟合和欠拟合"></a>深度学习-模型选择+过拟合和欠拟合</h1><h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><ul><li><p>训练误差和泛化误差<br>  训练误差：模型在训练数据上的误差<br>  泛化误差：模型在新数据上的误差<br>  <strong>更看重泛化误差</strong></p></li><li><p>验证数据集和测试数据集<br>  验证数据集：一个用来评估模型好坏的数据集（<strong>不能和训练数据集混合！！！</strong>）<br>  测试数据集：<strong>只用一次</strong>的数据集<br>  <strong>验证数据集得到的精度不是真正代表在新数据集上的泛化能力</strong></p></li><li><p>K-则交叉验证</p><ul><li>在<strong>没有足够多的数据</strong>时使用（这是常态）</li><li>算法：<ol><li>将训练数据分割成K块</li><li>for i = 1,…,K<br> 使用第i块作为验证数据集，其余作为训练数据集</li><li>报告K个验证集误差的<strong>平均</strong></li></ol></li><li>K常用5或10（很贵，看自己的能力）</li></ul></li></ul><h2 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h2><table><thead><tr><th align="center">模型\数据</th><th align="center">简单</th><th align="center">复杂</th></tr></thead><tbody><tr><td align="center">低</td><td align="center">正常</td><td align="center">欠拟合</td></tr><tr><td align="center">高</td><td align="center">过拟合</td><td align="center">正常</td></tr></tbody></table><ul><li><p><strong>模型容量</strong><br>  <strong>即拟合各种函数的能力</strong><br>  训练误差理论上可以到达零，即神经网络理论上可以记住所有数据<br>  核心：模型应先足够大（过拟合），通过各种手段控制模型容量，使得泛化误差下降</p></li><li><p><strong>估计模型容量</strong><br>  难以在不同的种类算法之间比较<br>  给定模型种类，有两个主要因素：<strong>参数个数</strong>，<strong>参数值的选择范围</strong></p></li><li><p><strong>VC维</strong>（了解）<br>  统计学习理论的一个核心思想<br>  支持N维输入的感知机的VC维是N+1<br>  一些多层感知机的VC维是O(Nlog2N)</p><ul><li>VC维的用处<ol><li>提供为什么一个模型好的理论依据<br> 它可以衡量训练误差和泛化误差之间的间隔</li><li>深度学习中很少使用<br> 衡量不是很准确<br> 计算深度学习模型的VC维很困难</li></ol></li></ul></li><li><p><strong>数据复杂度</strong><br>  重要因素：样本个数，每个样本的元素个数，时间空间结构，多样性</p></li><li><p><strong>QA</strong></p><ol><li>Q：SVM和神经网络相比？<br>A：SVM通过kernel来匹配模型复杂度，SVM很难做到一百万个数据量。能调整的东西不多，可调性不强。<br> 神经网络本身是一种语言。不直观但可编程性很强的框架，可以做到很大数据集。</li><li>Q：假设一个二分类问题，实际情况是1/9的比例，验证集两种类型的比例应该是？<br>A：验证数据集：两类1：1（数据不够多）</li><li>Q：K-则交叉验证的目的是确定超参数吗？需要用这个超参数再训练一次吗？<br>A：3种情况：<br>（1）确定超参数后，在整个训练集上重新训练一遍。<br>（2）选定好的超参数（任一结果或最好结果），但代价是模型少看了一些训练集<br>（3）训练后测试时k个模型都预测一次，把K个预测结果做平均，能增加模型稳定性，但代价是k倍。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-softmax回归</title>
      <link href="/2022/03/06/shen-du-xue-xi-softmax-hui-gui/"/>
      <url>/2022/03/06/shen-du-xue-xi-softmax-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-softmax回归"><a href="#深度学习-softmax回归" class="headerlink" title="深度学习-softmax回归"></a>深度学习-softmax回归</h1><ul><li><p>概述<br>  softmax回归的输出单元为多个（离散值），为单层神经网络，也属于全连接层。</p><p>  引入softmax运算使输出更适合离散值的预测和训练。</p></li><li><p>从回归到多类分类</p><ul><li>回归<ul><li>单连续值输出</li><li>自然区间R</li><li>跟真实值的区别作为损失</li></ul></li><li>分类<ul><li>通常多个输出</li><li>输出i是预测为第i类的置信度</li><li>不关心实际值，而是对正确类别的置信度很大</li><li>需要更置信的识别正确类（大余量）</li></ul></li></ul><h2 id="softmax回归模型"><a href="#softmax回归模型" class="headerlink" title="softmax回归模型"></a>softmax回归模型</h2><ul><li><p>输入和权重做线性叠加，softmax回归的<strong>输出值个数等于标签里的类别数</strong></p></li><li><p>可以直接使用输出值oi当作预测类别是i的置信度，并将值最大的输出所对应的类作为预测输出，即输出argmax oi。但输出层输出值的范围不确定且真实标签是离散值，这些离散值与不确定范围的输出值之间的范围难以衡量</p></li><li><p>故引用softmax运算将输出值变换成值为正且和为1的概率分布</p></li><li><p>softmax运算不改变预测类别</p></li></ul></li><li><p>交叉熵损失函数 </p><ul><li><p>真实标签也可以用类别分布表达，对于样本i，构造向量<strong>y</strong>i ∈R^q^， 使第<strong>y</strong>i个元素为1，其余为0（one-hot独热编码），使训练目标设为使预测概率分布<strong>y_hat</strong>(i)尽可能接近真实的标签概率分布<strong>y</strong>i</p></li><li><p>预测分类结果正确，并不需要预测概率完全等于标签概率。但平方损失过于严格</p></li><li><p>需要一个更适合衡量两个概率分布差异的测量函数，交叉熵是一个常用方法</p></li><li><p>交叉熵只关心对正确类别的预测概率</p></li><li><p>最小化交叉熵损失函数等价于最大化训练数据集所有标签类别的联合预测概率</p></li><li><p>其梯度是真实概率和预测概率的区别</p></li></ul><h2 id="softmax回归简洁实现"><a href="#softmax回归简洁实现" class="headerlink" title="softmax回归简洁实现"></a>softmax回归简洁实现</h2></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> d2lzh <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon, init</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss, nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line">net.add(nn.Dense(<span class="number">10</span>))  <span class="comment"># 单层神经网络，输出值个数为10类</span></span><br><span class="line">net.initialize(init.Normal(sigma=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">loss = gloss.SoftmaxCrossEntropyLoss()  <span class="comment"># 交叉熵函数</span></span><br><span class="line"></span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, {<span class="string">'learning_rate'</span>: <span class="number">0.1</span>})</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">5</span>  <span class="comment"># 迭代次数</span></span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, <span class="literal">None</span>, <span class="literal">None</span>, trainer)</span><br></pre></td></tr></tbody></table></figure><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><ol><li>L2 Loss（L2范数/平方损失）  梯度的绝对值在较远的地方下降较大</li><li>L1 Loss  预测值和实际值距离较远时，梯度下降不变，稳定性，但靠近0时，会变得不稳定（不平滑性）</li><li>Huber`s Robust Loss 结合上述两种损失函数的优点（稳定性+平滑性）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-多层感知机</title>
      <link href="/2022/03/06/shen-du-xue-xi-duo-ceng-gan-zhi-ji/"/>
      <url>/2022/03/06/shen-du-xue-xi-duo-ceng-gan-zhi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-多层感知机"><a href="#深度学习-多层感知机" class="headerlink" title="深度学习-多层感知机"></a>深度学习-多层感知机</h1><ul><li>概述：多层神经网络</li></ul><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>给入输入<strong>x</strong>，权重<strong>w</strong>，和偏移b，感知机输出：</p><p>o = σ(&lt;**w**, **x**&gt; + b)</p><p>x&gt;0时，σ(x) = 1</p><p>x&lt;=0时，σ(x) = 0 / -1</p><p><strong>单一元素输出可以做成二分类问题</strong></p><p>softmax有n各类则有n个输出，属于多分类问题，感知机只输出一个元素，属于二分类问题</p><p>线性回归输出的是实数，而感知机输出的是离散的类</p><p>单层感知机只对<strong>线性可分</strong>的数据集有效</p><ul><li><p>收敛定理</p><ul><li><p>数据在半径r内</p></li><li><p>余量ρ分类两类</p><p>  y(<strong>x</strong>T<strong>w</strong> + b) &gt;= ρ</p><p>  即分类正确而且留有余量</p></li><li><p>对于||<strong>w</strong>||2 + b2 &lt;= 1，感知机保证在(r2 + 1)/ρ2步后收敛</p></li></ul></li><li><p>XOR问题难以解决，不能拟合XOR函数，它只能产生线性分割面。所以引入了激活函数。</p></li></ul><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><ul><li><p><strong>隐藏层</strong>  </p><ul><li><p>位于输入层和输出层之间</p></li><li><p>多层感知机中隐藏层和输出层都是全连接层</p></li><li><p>隐藏层数和每层隐藏层大小是<strong>超参数</strong></p></li><li><p>神经网络越深，每层隐藏单元个数逐层减小，不断压缩，最下面一层可以大一点，减小的隐藏层个数过大会导致数据损失。</p></li><li><p>需加入激活函数，否则仍为单层神经网络</p></li></ul></li><li><p><strong>激活函数</strong>（常用ReLU函数） </p><p>  避免层数的塌陷</p><p>  全连接层只是对数据做仿射变换，而多个仿射变换的叠加仍然是放射变换，解决问题的一个方法是引入非线性变换，成为激活函数。</p><ol><li><p>ReLU函数</p><p> ReLU(x) = max(x, 0)</p><ul><li>尽管输入为0时不可导，但此处导数可以取0。</li></ul></li><li><p>sigmoid函数</p><ul><li><p>可以将元素的值变换到0~1之间</p></li><li><p>当输入接近0时，sigmoid函数接近线性变化</p></li><li><p>当输入为0时，sigmoid函数的导数最大值为0.25，偏离0时，导数接近0</p></li></ul></li><li><p>tanh函数</p><ul><li><p>可以将元素的值变换到-1~1之间</p></li><li><p>当输入接近0时，tanh函数接近线性变化</p></li><li><p>tanh函数在坐标系原点上对称</p></li><li><p>当输入为0时，tanh函数的导数最大值为1，偏离0时，导数接近0</p></li></ul></li></ol></li></ul><ul><li><p>多层感知机：含有至少一个隐藏层的由全连接层组成的神经网络，且每个输出层的输出通过激活函数进行变换</p></li><li><p>多层感知机的层数和各隐藏层中隐藏单元个数都是超参数</p></li><li><p>做多类分类的多层感知机可以使用softmax函数</p></li><li><p>主要步骤可以写成：</p><ol><li><p>定义一个神经网络</p></li><li><p>网络初始化</p></li><li><p>训练：</p></li></ol><ul><li><p>定义一个Trainer</p></li><li><p>传入数据及标签，数据大小batch_shape</p></li><li><p>前向传播计算loss</p></li><li><p>反向传播得到梯度</p></li><li><p>更新权重等参数</p></li></ul></li></ul><h2 id="多层感知机简洁实现"><a href="#多层感知机简洁实现" class="headerlink" title="多层感知机简洁实现"></a>多层感知机简洁实现</h2><h3 id="mxnet版"><a href="#mxnet版" class="headerlink" title="mxnet版"></a>mxnet版</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> d2lzh <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon, init</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss, nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line">net.add(nn.Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    nn.Dense(<span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 指定隐藏单元个数为256，并使用ReLU激活函数</span></span><br><span class="line">    <span class="comment"># 输出个数为10</span></span><br><span class="line"></span><br><span class="line">net.initialize(init.Normal(sigma=<span class="number">0.01</span>))</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算交叉熵损失</span></span><br><span class="line">loss = gloss.SoftmaxCrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化算法，设定学习率</span></span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, {<span class="string">'learning_rate'</span>: <span class="number">0.5</span>})</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">5</span></span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, <span class="literal">None</span>, <span class="literal">None</span>, trainer)</span><br></pre></td></tr></tbody></table></figure><h3 id="PyTorch版"><a href="#PyTorch版" class="headerlink" title="PyTorch版"></a>PyTorch版</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Flatten(), nn.Linear(<span class="number">784</span>, <span class="number">256</span>), nn.ReLU(), nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">m</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">nn.init.normal_(m.weight, std=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">net.apply(init_weights)</span><br><span class="line"></span><br><span class="line">batch_size, lr, num_epochs = <span class="number">256</span>, <span class="number">0.1</span>, <span class="number">10</span></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">trainer = torch.optim.SGD(net.Parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, <span class="literal">None</span>, <span class="literal">None</span>, trainer)</span><br></pre></td></tr></tbody></table></figure><ul><li><p>train_ch3函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_ch3</span>(<span class="params">net, train_iter, test_iter, loss, num_epochs, batch_size, params=<span class="literal">None</span>, lr=<span class="literal">None</span>, trainer=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""Train and evaluate a model with CPU."""</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        train_l_sum, train_acc_sum, n = <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            <span class="keyword">with</span> autograd.record():  <span class="comment"># 记录梯度（正向传播记录loss）</span></span><br><span class="line">                y_hat = net(X)  <span class="comment"># 预测值</span></span><br><span class="line">                l = loss(y_hat, y).<span class="built_in">sum</span>() <span class="comment"># 计算batch_size小批量样本交叉熵损失之和</span></span><br><span class="line">              <span class="comment"># 这里不除以是因为最后直接除以总样本数</span></span><br><span class="line">            l.backward()  <span class="comment"># 求梯度（反向传播求梯度）</span></span><br><span class="line">            <span class="keyword">if</span> trainer <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 从零实现</span></span><br><span class="line">        sgd(params, lr, batch_size)  <span class="comment"># 优化算法</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 简洁实现</span></span><br><span class="line">        trainer.step(batch_size)  <span class="comment"># 一次迭代，每次迭代更新一次参数</span></span><br><span class="line">        y = y.astype(<span class="string">'float32'</span>)</span><br><span class="line">        train_l_sum += l.asscalar()</span><br><span class="line">        train_acc_sum += (y_hat.argmax(axis=<span class="number">1</span>) == y).<span class="built_in">sum</span>().asscalar()</span><br><span class="line"> <span class="comment"># (y_hat.argmax(axis=1) == y)结果为由0和1组成的向量，相加为预测正确的数量。</span></span><br><span class="line"> <span class="comment"># asscalar()函数使其变为标量</span></span><br><span class="line">        n += y.size  <span class="comment"># 总样本数</span></span><br><span class="line">      test_acc = evaluate_accuracy(test_iter, net)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'epoch %d, loss %.4f, train acc %.3f, test acc %.3f'</span></span><br><span class="line">            % (epoch + <span class="number">1</span>, train_l_sum / n, train_acc_sum / n, test_acc))</span><br><span class="line"><span class="comment"># 除以n即计算平均</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>训练器Trainer函数</p></li></ul><ol><li>注册优化器函数</li><li>在with autograd.record():之后结合trainer.step(batch_size)更新权重。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-线性回归</title>
      <link href="/2022/03/06/shen-du-xue-xi-xian-xing-hui-gui/"/>
      <url>/2022/03/06/shen-du-xue-xi-xian-xing-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习-线性回归"><a href="#深度学习-线性回归" class="headerlink" title="深度学习-线性回归"></a>深度学习-线性回归</h1><ul><li><p>概述<br>  线性回归属于单层神经网络(一般有权重即为一层)，输出的是一个连续值，适用于回归问题。</p></li><li><p>字母含义<br>  x：特征（决定因素）<br>  <strong>w</strong>：权重(这个例子中是标量)<br>  b：偏差<br>  y：标签（实际值）<br>  y_hat(y^)：预测值</p><h2 id="线性回归基本要素"><a href="#线性回归基本要素" class="headerlink" title="线性回归基本要素"></a>线性回归基本要素</h2></li><li><p><strong>模型（房价预测）</strong><br>  y_hat = x1w1 + x2w2 + b</p></li><li><p><strong>模型训练</strong><br>  通过数据寻找特定的模型参数值，使模型在数据上的误差尽可能小。</p></li><li><p><strong>训练模型</strong><br>                 假设采集样本数为n，索引为i的样本的特征为x<del>1</del>^(i)^和x<del>2</del>^(i)^,标签为y^(i)^，对于索引为i的房屋，线性回归模型的房屋价格预测表达式为：<br>                                                     y_hat^(i)^ = x<del>1</del>^(i)^w<del>1</del> + x<del>2</del>^(i)^w<del>2</del> + b</p></li><li><p><strong>损失函数（一般使用平方函数）</strong> <span class="github-emoji"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>  通常选取一个非负数作为误差，数值越小误差越小。<br>  表达式：l^(i)^(w<del>1</del>, w<del>2</del>, b) =^1^/<del>2</del>(y_hat^(i)^ - y^(i)^)^2^    （<strong>^1^/<del>2</del>便于求导</strong>）</p><p>  通常使用所有样本误差的平均来衡量模型预测的质量<br>  即 l(w<del>1</del>, w<del>2</del>, b) = ^1^/<del>n</del>   ∑<del>i=1</del>^n^  l^(i)^(w<del>1</del>, w<del>2</del>, b) =  ^1^/<del>n</del>   ∑<del>i=1</del>^n^   ^1^/<del>2</del>( x<del>1</del>^(i)^w<del>1</del> + x<del>2</del>^(i)^w<del>2</del> + b - y^(i)^)^2^</p><p>  理想模型参数记为w<del>1</del>^<em>^, w<del>2</del>^</em>^, b^<em>^ ，即 w<del>1</del>^</em>^, w<del>2</del>^<em>^, b^</em>^ = argmin l(w<del>1</del>, w<del>2</del>, b)，使训练样本损失最小。</p></li><li><p><strong>优化算法</strong>  <span class="github-emoji"><span>👿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>  解析解：可以直接用公式表达的解。<br>  数值解：只能通过优化算法有限次迭代模型参数来尽可能降低损失函数的值。<br>  <strong>大多数深度学习模型没有解析解。</strong><br>  超参数：人为设定的参数，不需要通过训练模型学习。<br>  学习率：正数 </p><ul><li><strong>小批量随机梯度下降</strong>（sgd）  <span class="github-emoji"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>  算法：选取一组模型参数初始值（如随机选取），对参数进行多次迭代，使每次迭代都可能降低损失函数的值。每次迭代中，随机均匀采样一个由固定数目训练数据样本所组成的小批量，求小批量中数据样本的平均损失有关模型参数的导数（梯度）。</li></ul></li><li><p><strong>模型预测</strong>（模型推断或模型测试）<br>  得到的不一定是最优解w<del>1</del>^*^, w<del>2</del>^<em>^, b^</em>^，而是对最优解的一个<strong>近似</strong>。</p></li><li><p><strong>神经网络图</strong><br>  使用神经网络图直观地表现模型结构，隐去了模型参数权重和偏差。<br>  输入个数也叫特征数或特征向量维度。<br>  输入层不涉及计算。<br>  输出层中的神经元与输入层中各个输入完全连接，这里的输出层又叫全连接层或稠密层。</p><h2 id="线性回归从零实现"><a href="#线性回归从零实现" class="headerlink" title="线性回归从零实现"></a>线性回归从零实现</h2><p>  太懒了不想打了…   <span class="github-emoji"><span>😶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="线性回归简洁实现"><a href="#线性回归简洁实现" class="headerlink" title="线性回归简洁实现"></a>线性回归简洁实现</h2>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd, nd, gluon</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> data <span class="keyword">as</span> gdata, loss <span class="keyword">as</span> gloss, nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据集</span></span><br><span class="line">num_inputs, num_examples = <span class="number">2</span>, <span class="number">1000</span></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">features = nd.random.normal(scale=<span class="number">1</span>, shape=(num_examples, num_inputs))</span><br><span class="line">labels = true_W[<span class="number">0</span>] * features[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * features[:, <span class="number">1</span>] + true_b</span><br><span class="line"><span class="comment"># 为使模型复杂加入噪音</span></span><br><span class="line">labels += nd.random.normal(scale=<span class="number">0.01</span>, shape=labels.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">batch_size = <span class="number">10</span>   <span class="comment"># 批量大小</span></span><br><span class="line"><span class="comment"># 将训练数据的特征和标签组合</span></span><br><span class="line">dataset = gdata.ArrayDataset(features, labels)</span><br><span class="line">data_iter = gdata.DataLoader(dataset, batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># shuffle为True代表打乱顺序</span></span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="comment"># nn是neural networks（神经网络）的缩写</span></span><br><span class="line"><span class="comment"># net是Sequential（序列）实例。Sequential实例：看作一个串联各个层的容器</span></span><br><span class="line">net.add(nn.Dense(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 一个Dense表示一层，参数值为输出个数</span></span><br><span class="line"><span class="comment"># 在容器中依次加入层</span></span><br><span class="line"><span class="comment"># Gluon中无需指定每一层输入形状</span></span><br><span class="line"></span><br><span class="line">net.initialize(init.Normal(sigma=<span class="number">0.01</span>))</span><br><span class="line"><span class="comment"># init模块提供模型初始化参数的各种方法</span></span><br><span class="line">loss = gloss.L2Loss()</span><br><span class="line"><span class="comment"># 平方损失即L2范数损失</span></span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, {<span class="string">'learing_rate'</span>: <span class="number">0.03</span>})</span><br><span class="line"><span class="comment"># 创建Trainer实例，参数通过collect_params函数获取参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">num_epochs = <span class="number">3</span>  <span class="comment"># 迭代次数</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nums_epochs + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line"><span class="keyword">with</span> autogard.record():</span><br><span class="line">l = loss(net(X), y)</span><br><span class="line">l.backward()  <span class="comment"># 计算梯度</span></span><br><span class="line">trainer.step(batch_size)  <span class="comment"># 表示一次迭代，每次迭代更新参数</span></span><br><span class="line">l = loss(net(features), labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'epoch %d, loss: %f'</span> %(epoch, l.mean().asnumpy()))</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nim游戏</title>
      <link href="/2022/02/20/nim-you-xi/"/>
      <url>/2022/02/20/nim-you-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h1><ul><li><p>题目<br>  你和你的朋友，两个人一起玩&nbsp;Nim 游戏：<br>  - 桌子上有一堆石头。<br>  - 你们轮流进行自己的回合，&nbsp;<strong>你作为先手</strong>&nbsp;。<br>  - 每一回合，轮到的人拿掉&nbsp;<strong>1 - 3</strong> 块石头。<br>  - <strong>拿掉最后一块石头的人</strong>就是获胜者。<br>  假设你们<strong>每一步都是最优解</strong>。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。 </p></li><li><p>实例</p><ul><li>示例1：<br>  输入：n = 4<br>  输出：false<br>  解释：以下是可能的结果:<ol><li>移除1颗石头。你的朋友移走了3块石头，包括最后一块。你的朋友赢了。</li><li>移除2个石子。你的朋友移走2块石头，包括最后一块。你的朋友赢了。</li><li>你移走3颗石子。你的朋友移走了最后一块石头。你的朋友赢了。</li><li>在所有结果中，你的朋友是赢家。</li></ol></li><li>示例2：<br>  输入：n = 1<br>  输出：true</li><li>示例3：<br>  输入：n = 2<br>  输出：true</li></ul></li><li><p>提示<br>  1 &lt;= n &lt;= 2e31 - 1</p></li><li><p>题解思路<br>  其实就是一个推理题啦，我是一个一个推出来的</p><p>  根据题目 只要有一种情况可以推出我赢就算赢</p><table><thead><tr><th align="center">numbers</th><th align="center">winner</th></tr></thead><tbody><tr><td align="center">1块</td><td align="center">我拿1块，我赢</td></tr><tr><td align="center">2块</td><td align="center">我拿2块，我赢</td></tr><tr><td align="center">3块</td><td align="center">我拿3块，我赢</td></tr><tr><td align="center">4块</td><td align="center">我拿1~3块，朋友拿1~3块，朋友赢</td></tr><tr><td align="center">5块</td><td align="center">我拿1块，朋友最多拿3块，我赢</td></tr><tr><td align="center">6块</td><td align="center">我拿1块，朋友最多拿3块，我赢</td></tr><tr><td align="center">7块</td><td align="center">我拿1块，朋友最多拿3块，我赢</td></tr><tr><td align="center">8块</td><td align="center">朋友赢</td></tr><tr><td align="center">9块</td><td align="center">我赢</td></tr></tbody></table><p>  只要石头个数为4的倍数，不管怎么拿，最后一轮朋友可以取的石头个数不大于3个，朋友赢</p><p>  如果不是4的倍数，最后一轮我可以取的石头个数不大于3个，我赢</p><p>  所以石头个数只要不是4的倍数，就返回True，否则返回False</p></li><li><p>题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SOlution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">canWinNim</span>(<span class="params">self, n</span>):</span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       :type n: int</span></span><br><span class="line"><span class="string">       :rtype: bool</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p>  时间复杂度：O(n)<br>  空间复杂度：O(n)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按序打印</title>
      <link href="/2022/02/20/an-xu-da-yin/"/>
      <url>/2022/02/20/an-xu-da-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="按序打印"><a href="#按序打印" class="headerlink" title="按序打印"></a>按序打印</h1><ul><li><p>题目<br>  给你一个类：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">Foo</span> {</span><br><span class="line">public void first() { <span class="built_in">print</span>(<span class="string">"first"</span>); }</span><br><span class="line">public void second() { <span class="built_in">print</span>(<span class="string">"second"</span>); }</span><br><span class="line">public void third() { <span class="built_in">print</span>(<span class="string">"third"</span>); }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>  三个不同的线程 A、B、C 将会共用一个Foo实例。</p><p>  线程 A 将会调用 first() 方法</p><p>  线程 B 将会调用&nbsp;second() 方法</p><p>  线程 C 将会调用 third() 方法</p><p>  请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third() 方法在 second() 方法之后被执行。</p></li><li><p>实例</p><ul><li><p>示例1：<br>  <strong>输入</strong>：nums = [1,2,3]</p><p>  <strong>输出</strong>：”firstsecondthird”</p><p>  <strong>解释</strong>：有三个线程会被异步启动。输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。正确的输出是 “firstsecondthird”。</p></li><li><p>示例2：<br>  <strong>输入</strong>：nums = [1,3,2]</p><p>  <strong>输出</strong>：”firstsecondthird”</p><p>  <strong>解释</strong>：输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。正确的输出是 “firstsecondthird”。</p></li></ul></li><li><p>提示<br>  尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。</p><p>  你看到的输入格式主要是为了确保测试的全面性。</p></li><li><p>题解思路：<br>  多线程，利用threading.Lock(互斥锁)来解决</p></li><li><p>题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.lock = Lock()</span><br><span class="line">               self.locks = Lock()</span><br><span class="line">               self.lock.acquire()</span><br><span class="line">               self.locks.acquire()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self, printFirst</span>):</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">:type printFirst: method</span></span><br><span class="line"><span class="string">:rtype: void</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># printFirst() outputs "first". Do not change or remove this line.</span></span><br><span class="line">printFirst()</span><br><span class="line">self.lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">second</span>(<span class="params">self, printSecond</span>):</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">:type printSecond: method</span></span><br><span class="line"><span class="string">:rtype: void</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需要确定上一个是否已完成</span></span><br><span class="line"><span class="keyword">with</span> self.lock:</span><br><span class="line"><span class="comment"># printSecond() outputs "second". Do not change or remove this line.</span></span><br><span class="line">printSecond()</span><br><span class="line">self.locks.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">third</span>(<span class="params">self, printThird</span>):</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">:type printThird: method</span></span><br><span class="line"><span class="string">:rtype: void</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需要确定上一个是否已完成</span></span><br><span class="line"><span class="keyword">with</span> self.locks:</span><br><span class="line"><span class="comment"># printThird() outputs "third". Do not change or remove this line.</span></span><br><span class="line">printThird()</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转图像</title>
      <link href="/2022/02/20/xuan-zhuan-tu-xiang/"/>
      <url>/2022/02/20/xuan-zhuan-tu-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h1><ul><li><p>题目<br>  给定一个 n&nbsp;×&nbsp;n 的二维矩阵&nbsp;matrix 表示一个图像。请你将图像顺时针旋转 90 度。<br>  你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p></li><li><p>实例</p><ul><li>示例1：<br>  输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>  输出：[[7,4,1],[8,5,2],[9,6,3]]</li><li>示例2：<br>  输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]<br>  输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</li></ul></li><li><p>提示<br>  n == matrix.length == matrix[i].length<br>  1 &lt;= n &lt;= 20<br>  -1000 &lt;= matrix[i] [j] &lt;= 1000</p></li><li><p>题解思路<br>  观察示例，可知输出矩阵可由输入矩阵先转置（即沿对角线翻转）后左右进行列互换（或沿中线上下进行行互换后转置）。<br>  <strong>注意：前后不可以调换顺序，否则结果不正确</strong></p></li><li><p>题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, matrix</span>):</span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">       :rtype: None Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       n = <span class="built_in">len</span>(matrix)</span><br><span class="line"><span class="comment"># 先进行转置</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">           <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"><span class="comment"># 防止重复对i，j限制</span></span><br><span class="line">               <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                   matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line"><span class="comment"># 进行列互换</span></span><br><span class="line">       p = <span class="number">0</span></span><br><span class="line">       q = n - <span class="number">1</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">           <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">               matrix[j][p], matrix[j][q] = matrix[j][q], matrix[j][p]</span><br><span class="line">           p += <span class="number">1</span></span><br><span class="line">           q -= <span class="number">1</span></span><br><span class="line"><span class="comment"># 防止重复对p， q限制</span></span><br><span class="line">           <span class="keyword">if</span>  p&gt;q:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">   </span><br><span class="line">       <span class="keyword">return</span> matrix</span><br></pre></td></tr></tbody></table></figure><p>  时间复杂度：O(n²)<br>  空间复杂度：O(1)</p></li><li><p>官方题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, matrix</span>):</span><br><span class="line">n = <span class="built_in">len</span>(matrix)</span><br><span class="line"><span class="comment"># 水平翻转</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">2</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">matrix[i][j], matrix[n - i - <span class="number">1</span>][j] = matrix[n - i - <span class="number">1</span>][j], matrix[i][j]</span><br><span class="line"><span class="comment"># 主对角线翻转</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p>  时间复杂度：O(n²)<br>  空间复杂度：O(1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛水最多的容器</title>
      <link href="/2022/02/20/sheng-shui-zui-duo-de-rong-qi/"/>
      <url>/2022/02/20/sheng-shui-zui-duo-de-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="盛水最多的容器"><a href="#盛水最多的容器" class="headerlink" title="盛水最多的容器"></a>盛水最多的容器</h1><ul><li><p>题目<br>  给定一个长度为 n 的整数数组&nbsp;height&nbsp;。有&nbsp;n&nbsp;条垂线，第 i 条线的两个端点是&nbsp;(i, 0)&nbsp;和&nbsp;(i, height[i])&nbsp;。</p><p>  找出其中的两条线，使得它们与&nbsp;x&nbsp;轴共同构成的容器可以容纳最多的水。</p><p>  返回容器可以储存的最大水量。</p><p>  <strong>说明</strong>：你不能倾斜容器。</p></li><li><p>实例</p><ul><li>示例1：<br>  <strong>输入</strong>：[1,8,6,2,5,4,8,3,7]<br>  <strong>输出</strong>：49<br>  <strong>解释</strong>：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</li><li>示例2：<br>  <strong>输入</strong>：height = [1,1]<br>  <strong>输出</strong>：1</li></ul></li><li><p>提示<br>  n == height.length<br>  2 &lt;= n &lt;= 1e5<br>  0 &lt;= height[i] &lt;= 1e4</p></li><li><p>题解思路：<br>  刚开始想着都遍历一遍然后取最大值，用两个for循环实现</p><p>  后来发现会超时…</p><p>  以下是正确思路：</p><p>  求可以储存的最大水量即求x的差值*y的最大值</p><p>  x的差值即1到数组长度，随着x的变化求面积</p><p>  y的长度即为数组下标为x1，x2的数字中最小的一个</p><p>  可以使用双指针计算</p><p>  如：<br>  y: [1,8,6,2,5,4,8,3,7]<br>  x: [1,2,3,4,5,6,7,8,9]<br>    ^                             ^<br>  x差值为8，y中1和7中选择较小的值，此时盛水面积为8，并且指针向右移动一位<br>  y: [1,8,6,2,5,4,8,3,7]<br>  x: [1,2,3,4,5,6,7,8,9]<br>        ^                         ^<br>  x差值为7，y取8，此时盛水面积为56， 右指针向左移动一位</p><p>  并与前一个值做比较，保留最大的值，丢弃较小值</p><p>  以此类推</p></li><li><p>题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height</span>):</span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       :type height: List[int]</span></span><br><span class="line"><span class="string">       :rtype: int</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       l, r = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">       x = <span class="number">0</span></span><br><span class="line">       <span class="keyword">while</span> l &lt; r:</span><br><span class="line">           i = <span class="built_in">min</span>(height[l], height[r]) * (r - l)</span><br><span class="line">           x = <span class="built_in">max</span>(x, i)</span><br><span class="line">           <span class="keyword">if</span> height[l] &lt;= height[r]:</span><br><span class="line">               l += <span class="number">1</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               r -= <span class="number">1</span></span><br><span class="line">       <span class="keyword">return</span> x</span><br></pre></td></tr></tbody></table></figure><p>  时间复杂度：O(n)<br>  空间复杂度：O(1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳跃游戏</title>
      <link href="/2022/02/20/tiao-yue-you-xi/"/>
      <url>/2022/02/20/tiao-yue-you-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h1><ul><li><p>题目</p><p>  给定一个非负整数数组 nums ，你最初位于数组的<strong>第一个</strong>下标 。</p><p>  数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>  判断你是否能够到达最后一个下标。</p></li><li><p>实例：</p><ul><li>示例1：<br>  <strong>输入</strong>：nums = [2,3,1,1,4]<br>  <strong>输出</strong>：true<br>  <strong>解释</strong>：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</li><li>示例2：<br>  <strong>输入</strong>：nums = [3,2,1,0,4]<br>  <strong>输出</strong>：false<br>  <strong>解释</strong>：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</li></ul></li><li><p>提示<br>  1 &lt;= nums.length &lt;= 3e4<br>  0 &lt;= nums[i] &lt;= 1e5</p></li><li><p>题解思路：<br>  分为两种情况：</p><ol><li>当数组长度为1时，不管是多少，都能到达最后一位</li><li>当数组长度&gt;=1时，遍历数组，记录可以跳转的最大位置，若相加后索引大于等于最后一位索引，则一定能到达最后一位，返回True，若小于最后一位索引，则记为最大长度，若后续超过最大长度，则更新最大长度。若遍历后最大长度不能到达，返回False。</li></ol></li><li><p>题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums</span>):</span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       :type nums: List[int]</span></span><br><span class="line"><span class="string">       :rtype: bool</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       r, i, n = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line">       <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       <span class="keyword">while</span> i &lt;= r:</span><br><span class="line">           r = <span class="built_in">max</span>(r, i + nums[i])</span><br><span class="line">           <span class="keyword">if</span> r &gt;= n - <span class="number">1</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">           i += <span class="number">1</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>  时间复杂度：O(n)<br>  空间复杂度：O(1)</p></li><li><p>官方题解</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">       n, rightmost = <span class="built_in">len</span>(nums), <span class="number">0</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">           <span class="keyword">if</span> i &lt;= rightmost:</span><br><span class="line">               rightmost = <span class="built_in">max</span>(rightmost, i + nums[i])</span><br><span class="line">               <span class="keyword">if</span> rightmost &gt;= n - <span class="number">1</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>  时间复杂度：O(n)<br>  空间复杂度：O(1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
