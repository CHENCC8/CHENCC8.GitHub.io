{
    "version": "https://jsonfeed.org/version/1",
    "title": "Orange • All posts by \"leetcode\" category",
    "description": "",
    "home_page_url": "https://chencc8.github.io",
    "items": [
        {
            "id": "https://chencc8.github.io/2022/02/20/nim-you-xi/",
            "url": "https://chencc8.github.io/2022/02/20/nim-you-xi/",
            "title": "Nim游戏",
            "date_published": "2022-02-20T11:29:30.000Z",
            "content_html": "<h1 id=\"Nim游戏\"><a href=\"#Nim游戏\" class=\"headerlink\" title=\"Nim游戏\"></a>Nim游戏</h1><ul>\n<li><p>题目<br>  你和你的朋友，两个人一起玩&nbsp;Nim 游戏：<br>  - 桌子上有一堆石头。<br>  - 你们轮流进行自己的回合，&nbsp;<strong>你作为先手</strong>&nbsp;。<br>  - 每一回合，轮到的人拿掉&nbsp;<strong>1 - 3</strong> 块石头。<br>  - <strong>拿掉最后一块石头的人</strong>就是获胜者。<br>  假设你们<strong>每一步都是最优解</strong>。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。 </p>\n</li>\n<li><p>实例</p>\n<ul>\n<li>示例1：<br>  输入：n = 4<br>  输出：false<br>  解释：以下是可能的结果:<ol>\n<li>移除1颗石头。你的朋友移走了3块石头，包括最后一块。你的朋友赢了。</li>\n<li>移除2个石子。你的朋友移走2块石头，包括最后一块。你的朋友赢了。</li>\n<li>你移走3颗石子。你的朋友移走了最后一块石头。你的朋友赢了。</li>\n<li>在所有结果中，你的朋友是赢家。</li>\n</ol>\n</li>\n<li>示例2：<br>  输入：n = 1<br>  输出：true</li>\n<li>示例3：<br>  输入：n = 2<br>  输出：true</li>\n</ul>\n</li>\n<li><p>提示<br>  1 &lt;= n &lt;= 2e31 - 1</p>\n</li>\n<li><p>题解思路<br>  其实就是一个推理题啦，我是一个一个推出来的</p>\n<p>  根据题目 只要有一种情况可以推出我赢就算赢</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">numbers</th>\n<th align=\"center\">winner</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1块</td>\n<td align=\"center\">我拿1块，我赢</td>\n</tr>\n<tr>\n<td align=\"center\">2块</td>\n<td align=\"center\">我拿2块，我赢</td>\n</tr>\n<tr>\n<td align=\"center\">3块</td>\n<td align=\"center\">我拿3块，我赢</td>\n</tr>\n<tr>\n<td align=\"center\">4块</td>\n<td align=\"center\">我拿1~3块，朋友拿1~3块，朋友赢</td>\n</tr>\n<tr>\n<td align=\"center\">5块</td>\n<td align=\"center\">我拿1块，朋友最多拿3块，我赢</td>\n</tr>\n<tr>\n<td align=\"center\">6块</td>\n<td align=\"center\">我拿1块，朋友最多拿3块，我赢</td>\n</tr>\n<tr>\n<td align=\"center\">7块</td>\n<td align=\"center\">我拿1块，朋友最多拿3块，我赢</td>\n</tr>\n<tr>\n<td align=\"center\">8块</td>\n<td align=\"center\">朋友赢</td>\n</tr>\n<tr>\n<td align=\"center\">9块</td>\n<td align=\"center\">我赢</td>\n</tr>\n</tbody></table>\n<p>  只要石头个数为4的倍数，不管怎么拿，最后一轮朋友可以取的石头个数不大于3个，朋友赢</p>\n<p>  如果不是4的倍数，最后一轮我可以取的石头个数不大于3个，我赢</p>\n<p>  所以石头个数只要不是4的倍数，就返回True，否则返回False</p>\n</li>\n<li><p>题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SOlution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">   \t<span class=\"keyword\">def</span> <span class=\"title function_\">canWinNim</span>(<span class=\"params\">self, n</span>):</span><br><span class=\"line\">       \t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">       \t:type n: int</span></span><br><span class=\"line\"><span class=\"string\">       \t:rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">       \t\"\"\"</span></span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> n % <span class=\"number\">4</span> != <span class=\"number\">0</span></span><br></pre></td></tr></tbody></table></figure>\n<p>  时间复杂度：O(n)<br>  空间复杂度：O(n)</p>\n</li>\n</ul>\n",
            "tags": [
                "leetcode",
                "python"
            ]
        },
        {
            "id": "https://chencc8.github.io/2022/02/20/an-xu-da-yin/",
            "url": "https://chencc8.github.io/2022/02/20/an-xu-da-yin/",
            "title": "按序打印",
            "date_published": "2022-02-20T11:29:30.000Z",
            "content_html": "<h1 id=\"按序打印\"><a href=\"#按序打印\" class=\"headerlink\" title=\"按序打印\"></a>按序打印</h1><ul>\n<li><p>题目<br>  给你一个类：</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> {</span><br><span class=\"line\">\tpublic void first() { <span class=\"built_in\">print</span>(<span class=\"string\">\"first\"</span>); }</span><br><span class=\"line\">\tpublic void second() { <span class=\"built_in\">print</span>(<span class=\"string\">\"second\"</span>); }</span><br><span class=\"line\">\tpublic void third() { <span class=\"built_in\">print</span>(<span class=\"string\">\"third\"</span>); }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>  三个不同的线程 A、B、C 将会共用一个Foo实例。</p>\n<p>  线程 A 将会调用 first() 方法</p>\n<p>  线程 B 将会调用&nbsp;second() 方法</p>\n<p>  线程 C 将会调用 third() 方法</p>\n<p>  请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third() 方法在 second() 方法之后被执行。</p>\n</li>\n<li><p>实例</p>\n<ul>\n<li><p>示例1：<br>  <strong>输入</strong>：nums = [1,2,3]</p>\n<p>  <strong>输出</strong>：”firstsecondthird”</p>\n<p>  <strong>解释</strong>：有三个线程会被异步启动。输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。正确的输出是 “firstsecondthird”。</p>\n</li>\n<li><p>示例2：<br>  <strong>输入</strong>：nums = [1,3,2]</p>\n<p>  <strong>输出</strong>：”firstsecondthird”</p>\n<p>  <strong>解释</strong>：输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。正确的输出是 “firstsecondthird”。</p>\n</li>\n</ul>\n</li>\n<li><p>提示<br>  尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。</p>\n<p>  你看到的输入格式主要是为了确保测试的全面性。</p>\n</li>\n<li><p>题解思路：<br>  多线程，利用threading.Lock(互斥锁)来解决</p>\n</li>\n<li><p>题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">import</span> threading</span><br><span class=\"line\">\t<span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Lock</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">\t\t\tself.lock = Lock()</span><br><span class=\"line\">               self.locks = Lock()</span><br><span class=\"line\">               self.lock.acquire()</span><br><span class=\"line\">               self.locks.acquire()</span><br><span class=\"line\">\t\t<span class=\"keyword\">def</span> <span class=\"title function_\">first</span>(<span class=\"params\">self, printFirst</span>):</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t:type printFirst: method</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t:rtype: void</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># printFirst() outputs \"first\". Do not change or remove this line.</span></span><br><span class=\"line\">\t\t\tprintFirst()</span><br><span class=\"line\">\t\t\tself.lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">def</span> <span class=\"title function_\">second</span>(<span class=\"params\">self, printSecond</span>):</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t:type printSecond: method</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t:rtype: void</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"\"\"</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 需要确定上一个是否已完成</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">with</span> self.lock:</span><br><span class=\"line\"><span class=\"comment\"># printSecond() outputs \"second\". Do not change or remove this line.</span></span><br><span class=\"line\">\t\t\t\tprintSecond()</span><br><span class=\"line\">\t\t\t\tself.locks.release()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">def</span> <span class=\"title function_\">third</span>(<span class=\"params\">self, printThird</span>):</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t:type printThird: method</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t:rtype: void</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"\"\"</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 需要确定上一个是否已完成</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">with</span> self.locks:</span><br><span class=\"line\"><span class=\"comment\"># printThird() outputs \"third\". Do not change or remove this line.</span></span><br><span class=\"line\">\t\t\t\tprintThird()</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n",
            "tags": [
                "leetcode",
                "python"
            ]
        },
        {
            "id": "https://chencc8.github.io/2022/02/20/xuan-zhuan-tu-xiang/",
            "url": "https://chencc8.github.io/2022/02/20/xuan-zhuan-tu-xiang/",
            "title": "旋转图像",
            "date_published": "2022-02-20T11:29:30.000Z",
            "content_html": "<h1 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h1><ul>\n<li><p>题目<br>  给定一个 n&nbsp;×&nbsp;n 的二维矩阵&nbsp;matrix 表示一个图像。请你将图像顺时针旋转 90 度。<br>  你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>\n</li>\n<li><p>实例</p>\n<ul>\n<li>示例1：<br>  输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>  输出：[[7,4,1],[8,5,2],[9,6,3]]</li>\n<li>示例2：<br>  输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]<br>  输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</li>\n</ul>\n</li>\n<li><p>提示<br>  n == matrix.length == matrix[i].length<br>  1 &lt;= n &lt;= 20<br>  -1000 &lt;= matrix[i] [j] &lt;= 1000</p>\n</li>\n<li><p>题解思路<br>  观察示例，可知输出矩阵可由输入矩阵先转置（即沿对角线翻转）后左右进行列互换（或沿中线上下进行行互换后转置）。<br>  <strong>注意：前后不可以调换顺序，否则结果不正确</strong></p>\n</li>\n<li><p>题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">rotate</span>(<span class=\"params\">self, matrix</span>):</span><br><span class=\"line\">       <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">       :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">       :rtype: None Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">       \"\"\"</span></span><br><span class=\"line\">       n = <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">\t<span class=\"comment\"># 先进行转置</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">           <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 防止重复对i，j限制</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> i &lt; j:</span><br><span class=\"line\">                   matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class=\"line\">\t<span class=\"comment\"># 进行列互换</span></span><br><span class=\"line\">       p = <span class=\"number\">0</span></span><br><span class=\"line\">       \tq = n - <span class=\"number\">1</span></span><br><span class=\"line\">       \t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">           \t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">               \tmatrix[j][p], matrix[j][q] = matrix[j][q], matrix[j][p]</span><br><span class=\"line\">           \tp += <span class=\"number\">1</span></span><br><span class=\"line\">           \tq -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 防止重复对p， q限制</span></span><br><span class=\"line\">           \t<span class=\"keyword\">if</span>  p&gt;q:</span><br><span class=\"line\">               <span class=\"keyword\">break</span></span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"keyword\">return</span> matrix</span><br></pre></td></tr></tbody></table></figure>\n\n<p>  时间复杂度：O(n²)<br>  空间复杂度：O(1)</p>\n</li>\n<li><p>官方题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">rotate</span>(<span class=\"params\">self, matrix</span>):</span><br><span class=\"line\">\t\tn = <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 水平翻转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n // <span class=\"number\">2</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">\t\t\tmatrix[i][j], matrix[n - i - <span class=\"number\">1</span>][j] = matrix[n - i - <span class=\"number\">1</span>][j], matrix[i][j]</span><br><span class=\"line\">\t\t<span class=\"comment\"># 主对角线翻转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">\t\t\tmatrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class=\"line\"> </span><br></pre></td></tr></tbody></table></figure>\n<p>  时间复杂度：O(n²)<br>  空间复杂度：O(1)</p>\n</li>\n</ul>\n",
            "tags": [
                "leetcode",
                "python"
            ]
        },
        {
            "id": "https://chencc8.github.io/2022/02/20/tiao-yue-you-xi/",
            "url": "https://chencc8.github.io/2022/02/20/tiao-yue-you-xi/",
            "title": "跳跃游戏",
            "date_published": "2022-02-20T11:29:30.000Z",
            "content_html": "<h1 id=\"跳跃游戏\"><a href=\"#跳跃游戏\" class=\"headerlink\" title=\"跳跃游戏\"></a>跳跃游戏</h1><ul>\n<li><p>题目</p>\n<p>  给定一个非负整数数组 nums ，你最初位于数组的<strong>第一个</strong>下标 。</p>\n<p>  数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>  判断你是否能够到达最后一个下标。</p>\n</li>\n<li><p>实例：</p>\n<ul>\n<li>示例1：<br>  <strong>输入</strong>：nums = [2,3,1,1,4]<br>  <strong>输出</strong>：true<br>  <strong>解释</strong>：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</li>\n<li>示例2：<br>  <strong>输入</strong>：nums = [3,2,1,0,4]<br>  <strong>输出</strong>：false<br>  <strong>解释</strong>：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</li>\n</ul>\n</li>\n<li><p>提示<br>  1 &lt;= nums.length &lt;= 3e4<br>  0 &lt;= nums[i] &lt;= 1e5</p>\n</li>\n<li><p>题解思路：<br>  分为两种情况：</p>\n<ol>\n<li>当数组长度为1时，不管是多少，都能到达最后一位</li>\n<li>当数组长度&gt;=1时，遍历数组，记录可以跳转的最大位置，若相加后索引大于等于最后一位索引，则一定能到达最后一位，返回True，若小于最后一位索引，则记为最大长度，若后续超过最大长度，则更新最大长度。若遍历后最大长度不能到达，返回False。</li>\n</ol>\n</li>\n<li><p>题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">   \t<span class=\"keyword\">def</span> <span class=\"title function_\">canJump</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">       \t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">       \t:type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">       \t:rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">       \t\"\"\"</span></span><br><span class=\"line\">       \tr, i, n = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">       \t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">           \t<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">       \t<span class=\"keyword\">while</span> i &lt;= r:</span><br><span class=\"line\">           \tr = <span class=\"built_in\">max</span>(r, i + nums[i])</span><br><span class=\"line\">           \t<span class=\"keyword\">if</span> r &gt;= n - <span class=\"number\">1</span>:</span><br><span class=\"line\">               \t<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">           \ti += <span class=\"number\">1</span></span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></tbody></table></figure>\n<p>  时间复杂度：O(n)<br>  空间复杂度：O(1)</p>\n</li>\n<li><p>官方题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">   \t<span class=\"keyword\">def</span> <span class=\"title function_\">canJump</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">       \tn, rightmost = <span class=\"built_in\">len</span>(nums), <span class=\"number\">0</span></span><br><span class=\"line\">       \t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">           \t<span class=\"keyword\">if</span> i &lt;= rightmost:</span><br><span class=\"line\">               \trightmost = <span class=\"built_in\">max</span>(rightmost, i + nums[i])</span><br><span class=\"line\">               \t<span class=\"keyword\">if</span> rightmost &gt;= n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                   \t<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></tbody></table></figure>\n<p>  时间复杂度：O(n)<br>  空间复杂度：O(1)</p>\n</li>\n</ul>\n",
            "tags": [
                "leetcode",
                "python"
            ]
        },
        {
            "id": "https://chencc8.github.io/2022/02/20/sheng-shui-zui-duo-de-rong-qi/",
            "url": "https://chencc8.github.io/2022/02/20/sheng-shui-zui-duo-de-rong-qi/",
            "title": "盛水最多的容器",
            "date_published": "2022-02-20T11:29:30.000Z",
            "content_html": "<h1 id=\"盛水最多的容器\"><a href=\"#盛水最多的容器\" class=\"headerlink\" title=\"盛水最多的容器\"></a>盛水最多的容器</h1><ul>\n<li><p>题目<br>  给定一个长度为 n 的整数数组&nbsp;height&nbsp;。有&nbsp;n&nbsp;条垂线，第 i 条线的两个端点是&nbsp;(i, 0)&nbsp;和&nbsp;(i, height[i])&nbsp;。</p>\n<p>  找出其中的两条线，使得它们与&nbsp;x&nbsp;轴共同构成的容器可以容纳最多的水。</p>\n<p>  返回容器可以储存的最大水量。</p>\n<p>  <strong>说明</strong>：你不能倾斜容器。</p>\n</li>\n<li><p>实例</p>\n<ul>\n<li>示例1：<br>  <strong>输入</strong>：[1,8,6,2,5,4,8,3,7]<br>  <strong>输出</strong>：49<br>  <strong>解释</strong>：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</li>\n<li>示例2：<br>  <strong>输入</strong>：height = [1,1]<br>  <strong>输出</strong>：1</li>\n</ul>\n</li>\n<li><p>提示<br>  n == height.length<br>  2 &lt;= n &lt;= 1e5<br>  0 &lt;= height[i] &lt;= 1e4</p>\n</li>\n<li><p>题解思路：<br>  刚开始想着都遍历一遍然后取最大值，用两个for循环实现</p>\n<p>  后来发现会超时…</p>\n<p>  以下是正确思路：</p>\n<p>  求可以储存的最大水量即求x的差值*y的最大值</p>\n<p>  x的差值即1到数组长度，随着x的变化求面积</p>\n<p>  y的长度即为数组下标为x1，x2的数字中最小的一个</p>\n<p>  可以使用双指针计算</p>\n<p>  如：<br>  y: [1,8,6,2,5,4,8,3,7]<br>  x: [1,2,3,4,5,6,7,8,9]<br>    ^                             ^<br>  x差值为8，y中1和7中选择较小的值，此时盛水面积为8，并且指针向右移动一位<br>  y: [1,8,6,2,5,4,8,3,7]<br>  x: [1,2,3,4,5,6,7,8,9]<br>        ^                         ^<br>  x差值为7，y取8，此时盛水面积为56， 右指针向左移动一位</p>\n<p>  并与前一个值做比较，保留最大的值，丢弃较小值</p>\n<p>  以此类推</p>\n</li>\n<li><p>题解</p>\n  <figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">maxArea</span>(<span class=\"params\">self, height</span>):</span><br><span class=\"line\">       <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">       :type height: List[int]</span></span><br><span class=\"line\"><span class=\"string\">       :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">       \"\"\"</span></span><br><span class=\"line\">       l, r = <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(height) - <span class=\"number\">1</span></span><br><span class=\"line\">       x = <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> l &lt; r:</span><br><span class=\"line\">           i = <span class=\"built_in\">min</span>(height[l], height[r]) * (r - l)</span><br><span class=\"line\">           x = <span class=\"built_in\">max</span>(x, i)</span><br><span class=\"line\">           <span class=\"keyword\">if</span> height[l] &lt;= height[r]:</span><br><span class=\"line\">               l += <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"keyword\">else</span>:</span><br><span class=\"line\">               r -= <span class=\"number\">1</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> x</span><br></pre></td></tr></tbody></table></figure>\n<p>  时间复杂度：O(n)<br>  空间复杂度：O(1)</p>\n</li>\n</ul>\n",
            "tags": [
                "leetcode",
                "python"
            ]
        }
    ]
}